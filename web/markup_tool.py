"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Plotly –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è canvas —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π –º—ã—à—å—é
"""

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import dash
from dash import dcc, html, Input, Output, State, callback_context
import dash_bootstrap_components as dbc
from PIL import Image
import numpy as np
import json
from typing import Dict, List, Tuple, Optional, Any
import io
import base64


class MarkupTool:
    """
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ–ª–µ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    
    def __init__(self):
        self.current_image = None
        self.image_width = 0
        self.image_height = 0
        self.fields = []
        self.current_field_type = None
        self.selection_mode = False
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
        self.field_colors = {
            'fullname': '#FF6B6B',
            'seriesandnumber': '#4ECDC4',
            'registrationnumber': '#45B7D1',
            'issuedate': '#96CEB4',
            'series': '#FFEAA7',
            'number': '#DDA0DD'
        }
    
    def create_markup_layout(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–µ—Ç layout –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
        """
        return html.Div([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            html.H3("üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
                   className="text-center mb-4"),
            
            # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            dbc.Card([
                dbc.CardBody([
                    dbc.Row([
                        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—è
                        dbc.Col([
                            html.Label("–¢–∏–ø –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏:", className="fw-bold"),
                            dcc.Dropdown(
                                id='field-type-selector',
                                options=[
                                    {'label': '–§–ò–û', 'value': 'fullname'},
                                    {'label': '–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä', 'value': 'seriesandnumber'},
                                    {'label': '–†–µ–≥. –Ω–æ–º–µ—Ä', 'value': 'registrationnumber'},
                                    {'label': '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏', 'value': 'issuedate'}
                                ],
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—è",
                                className="mb-2"
                            )
                        ], width=3),
                        
                        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        dbc.Col([
                            html.Label("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", className="fw-bold"),
                            html.Br(),
                            dbc.ButtonGroup([
                                dbc.Button("üéØ –ù–∞—á–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É", id="start-markup-btn", 
                                          color="success", size="sm", disabled=True),
                                dbc.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è", id="clear-fields-btn", 
                                          color="warning", size="sm"),
                                dbc.Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", id="save-config-btn", 
                                          color="primary", size="sm")
                            ])
                        ], width=4),
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        dbc.Col([
                            html.Label("–°—Ç–∞—Ç—É—Å:", className="fw-bold"),
                            html.Div(id="markup-status", 
                                   children="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—Ç–∫–∏",
                                   className="small text-muted")
                        ], width=5)
                    ])
                ])
            ], className="mb-4"),
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            html.Div([
                dcc.Graph(
                    id='markup-image',
                    config={
                        'displayModeBar': True,
                        'modeBarButtonsToAdd': ['select2d', 'lasso2d'],
                        'modeBarButtonsToRemove': ['zoom2d', 'pan2d'],
                        'displaylogo': False
                    },
                    style={'height': '70vh'}
                )
            ], className="mb-4"),
            
            # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            dbc.Card([
                dbc.CardHeader("üìã –†–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è"),
                dbc.CardBody([
                    html.Div(id="fields-list")
                ])
            ], className="mb-4"),
            
            # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            dbc.Collapse([
                dbc.Card([
                    dbc.CardHeader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
                    dbc.CardBody([
                        html.Label("JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π:", className="fw-bold"),
                        dcc.Textarea(
                            id="config-export",
                            style={'width': '100%', 'height': 200, 'fontFamily': 'monospace'},
                            readOnly=True
                        ),
                        html.Br(),
                        html.Br(),
                        dbc.Row([
                            dbc.Col([
                                html.Label("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:", className="fw-bold"),
                                dbc.Input(id="config-name", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: MY_ORG_CERTIFICATE")
                            ], width=6),
                            dbc.Col([
                                html.Label("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:", className="fw-bold"),
                                dbc.Input(id="config-organization", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–û–Ø_–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø")
                            ], width=6)
                        ])
                    ])
                ])
            ], id="export-collapse", is_open=False),
            
            # –°–∫—Ä—ã—Ç—ã–µ div –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            html.Div(id="markup-data", style={'display': 'none'}),
            html.Div(id="image-data", style={'display': 'none'})
        ])
    
    def create_empty_figure(self) -> go.Figure:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫-–∑–∞–≥–ª—É—à–∫—É
        """
        fig = go.Figure()
        fig.add_annotation(
            text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—Ç–∫–∏",
            xref="paper", yref="paper",
            x=0.5, y=0.5, xanchor='center', yanchor='middle',
            showarrow=False,
            font=dict(size=16, color="gray")
        )
        fig.update_layout(
            xaxis={'visible': False},
            yaxis={'visible': False},
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        return fig
    
    def create_image_figure(self, img: Image.Image, fields: List[Dict] = None) -> go.Figure:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        
        Args:
            img: PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            fields: –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            
        Returns:
            Plotly figure
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ numpy array
        img_array = np.array(img)
        
        # –°–æ–∑–¥–∞–µ–º figure
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        fig.add_trace(
            go.Image(z=img_array, name="–î–æ–∫—É–º–µ–Ω—Ç")
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if fields:
            for i, field in enumerate(fields):
                if 'box' in field and 'name' in field:
                    x1, y1, x2, y2 = field['box']
                    color = self.field_colors.get(field['name'], '#FF0000')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                    fig.add_shape(
                        type="rect",
                        x0=x1, y0=y1, x1=x2, y1=y2,
                        line=dict(color=color, width=3),
                        fillcolor=color,
                        opacity=0.2,
                        layer="above"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                    fig.add_annotation(
                        x=x1, y=y1-10,
                        text=field.get('label', field['name']),
                        showarrow=False,
                        font=dict(color=color, size=12),
                        bgcolor="white",
                        bordercolor=color,
                        borderwidth=1
                    )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        fig.update_layout(
            title="–ö–ª–∏–∫–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –ø–æ–ª—è",
            xaxis=dict(
                showgrid=False,
                zeroline=False,
                range=[0, img.width]
            ),
            yaxis=dict(
                showgrid=False,
                zeroline=False,
                range=[img.height, 0],  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                scaleanchor="x",
                scaleratio=1
            ),
            dragmode="select",
            selectdirection="diagonal",
            plot_bgcolor='white',
            paper_bgcolor='white',
            margin=dict(l=0, r=0, t=50, b=0)
        )
        
        return fig
    
    def extract_selection_coordinates(self, selection_data: Dict) -> Optional[Tuple[int, int, int, int]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        
        Args:
            selection_data: –î–∞–Ω–Ω—ã–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è from Plotly
            
        Returns:
            Tuple –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (x1, y1, x2, y2) –∏–ª–∏ None
        """
        if not selection_data or 'range' not in selection_data:
            return None
        
        try:
            x_range = selection_data['range']['x']
            y_range = selection_data['range']['y']
            
            x1, x2 = min(x_range), max(x_range)
            y1, y2 = min(y_range), max(y_range)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            return (int(x1), int(y1), int(x2), int(y2))
            
        except (KeyError, TypeError, ValueError):
            return None
    
    def validate_selection(self, coordinates: Tuple[int, int, int, int]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        """
        x1, y1, x2, y2 = coordinates
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏
        min_width, min_height = 20, 10
        
        width = abs(x2 - x1)
        height = abs(y2 - y1)
        
        return width >= min_width and height >= min_height
    
    def create_fields_list_layout(self, fields: List[Dict]) -> html.Div:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        """
        if not fields:
            return html.P("–ü–æ–ª—è –Ω–µ —Ä–∞–∑–º–µ—á–µ–Ω—ã", className="text-muted")
        
        field_items = []
        for i, field in enumerate(fields):
            color = self.field_colors.get(field['name'], '#FF0000')
            box = field.get('box', [0, 0, 0, 0])
            
            field_items.append(
                dbc.ListGroupItem([
                    dbc.Row([
                        dbc.Col([
                            html.Span(
                                field.get('label', field['name']), 
                                className="fw-bold",
                                style={'color': color}
                            ),
                            html.Small(
                                f" ({field['name']})",
                                className="text-muted"
                            )
                        ], width=6),
                        dbc.Col([
                            html.Small(
                                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({box[0]}, {box[1]}) - ({box[2]}, {box[3]})",
                                className="text-muted"
                            )
                        ], width=4),
                        dbc.Col([
                            dbc.Button(
                                "üóëÔ∏è", 
                                id={'type': 'delete-field-btn', 'index': i},
                                color="outline-danger",
                                size="sm"
                            )
                        ], width=2)
                    ])
                ])
            )
        
        return dbc.ListGroup(field_items)
    
    def export_config(self, fields: List[Dict], config_name: str, 
                     organization: str) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç
        """
        config = {
            'name': config_name or "CUSTOM_CONFIG",
            'organization': organization or "CUSTOM_ORG",
            'document_type': "custom",
            'fields': [
                {
                    'name': field['name'],
                    'box': field['box'],
                    'label': field.get('label', field['name'])
                }
                for field in fields
            ],
            'patterns': {
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
                field['name']: f"parse_{field['name']}"
                for field in fields
            },
            'ocr_params': {
                'scale_factor': 4,
                'contrast_boost': 1.5
            }
        }
        
        return json.dumps(config, ensure_ascii=False, indent=2)
    
    def load_image_from_base64(self, base64_string: str) -> Optional[Image.Image]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ base64 —Å—Ç—Ä–æ–∫–∏
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image/...;base64,
            if ',' in base64_string:
                base64_string = base64_string.split(',')[1]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
            image_data = base64.b64decode(base64_string)
            image = Image.open(io.BytesIO(image_data))
            
            return image
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None


# Callbacks –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
def setup_markup_callbacks(app: dash.Dash, markup_tool: MarkupTool):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
    """
    
    @app.callback(
        [Output('start-markup-btn', 'disabled'),
         Output('markup-status', 'children')],
        [Input('field-type-selector', 'value'),
         Input('image-data', 'children')]
    )
    def update_markup_button(field_type, image_data):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—Ç–∫–∏"""
        if field_type and image_data:
            return False, f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–∑–º–µ—Ç–∫–µ –ø–æ–ª—è: {field_type}"
        elif image_data:
            return True, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏"
        else:
            return True, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—Ç–∫–∏"
    
    @app.callback(
        Output('markup-image', 'figure'),
        [Input('image-data', 'children'),
         Input('markup-data', 'children')]
    )
    def update_image_figure(image_data, markup_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
        if not image_data:
            return markup_tool.create_empty_figure()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = markup_tool.load_image_from_base64(image_data)
            if not img:
                return markup_tool.create_empty_figure()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
            fields = json.loads(markup_data) if markup_data else []
            
            return markup_tool.create_image_figure(img, fields)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return markup_tool.create_empty_figure()
    
    @app.callback(
        [Output('markup-data', 'children'),
         Output('fields-list', 'children')],
        [Input('markup-image', 'selectedData'),
         Input('clear-fields-btn', 'n_clicks')],
        [State('field-type-selector', 'value'),
         State('markup-data', 'children')]
    )
    def handle_selection(selected_data, clear_clicks, field_type, current_markup_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        ctx = callback_context
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        if ctx.triggered and 'clear-fields-btn' in ctx.triggered[0]['prop_id']:
            return json.dumps([]), markup_tool.create_fields_list_layout([])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if selected_data and field_type:
            coordinates = markup_tool.extract_selection_coordinates(selected_data)
            
            if coordinates and markup_tool.validate_selection(coordinates):
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—è
                fields = json.loads(current_markup_data) if current_markup_data else []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
                new_field = {
                    'name': field_type,
                    'box': list(coordinates),
                    'label': {
                        'fullname': '–§–ò–û',
                        'seriesandnumber': '–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä',
                        'registrationnumber': '–†–µ–≥. –Ω–æ–º–µ—Ä',
                        'issuedate': '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏'
                    }.get(field_type, field_type)
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞
                fields = [f for f in fields if f['name'] != field_type]
                fields.append(new_field)
                
                fields_list = markup_tool.create_fields_list_layout(fields)
                return json.dumps(fields), fields_list
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_fields = json.loads(current_markup_data) if current_markup_data else []
        fields_list = markup_tool.create_fields_list_layout(current_fields)
        return current_markup_data or json.dumps([]), fields_list
    
    @app.callback(
        [Output('export-collapse', 'is_open'),
         Output('config-export', 'value')],
        [Input('save-config-btn', 'n_clicks')],
        [State('markup-data', 'children'),
         State('config-name', 'value'),
         State('config-organization', 'value')]
    )
    def export_configuration(save_clicks, markup_data, config_name, organization):
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if save_clicks and markup_data:
            fields = json.loads(markup_data)
            if fields:
                config_json = markup_tool.export_config(fields, config_name, organization)
                return True, config_json
        
        return False, ""


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
class MarkupIntegration:
    """
    –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    """
    
    @staticmethod
    def image_to_base64(img: Image.Image) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å—Ç—Ä–æ–∫—É
        """
        buffer = io.BytesIO()
        img.save(buffer, format='PNG')
        img_str = base64.b64encode(buffer.getvalue()).decode()
        return f"data:image/png;base64,{img_str}"
    
    @staticmethod
    def validate_config_json(config_str: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        Returns:
            Tuple[is_valid, error_message]
        """
        try:
            config = json.loads(config_str)
            
            required_fields = ['name', 'organization', 'fields']
            for field in required_fields:
                if field not in config:
                    return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"
            
            if not isinstance(config['fields'], list):
                return False, "–ü–æ–ª–µ 'fields' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            
            for i, field in enumerate(config['fields']):
                if 'name' not in field or 'box' not in field:
                    return False, f"–ü–æ–ª–µ {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'name' –∏–ª–∏ 'box'"
                
                if not isinstance(field['box'], list) or len(field['box']) != 4:
                    return False, f"–ü–æ–ª–µ {i+1}: 'box' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
            
            return True, ""
            
        except json.JSONDecodeError as e:
            return False, f"–û—à–∏–±–∫–∞ JSON: {str(e)}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
