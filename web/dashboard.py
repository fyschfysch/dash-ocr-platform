"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Dash Dashboard –¥–ª—è OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–° –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ–ª–µ–π, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
–í–µ—Ä—Å–∏—è: 2.0 (–§–∏–Ω–∞–ª—å–Ω–∞—è)
"""

import dash
from dash import dcc, html, Input, Output, State, ALL, MATCH, callback_context, no_update
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import plotly.graph_objects as go

from PIL import Image, ImageDraw
import pandas as pd
import numpy as np
import io
import base64
import os
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
import logging
import json

import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.ocr_engine import DocumentProcessor, OCREngine
from core.image_processor import AdvancedImageProcessor
from core.config import get_config, get_available_configs, UncertaintyEngine, get_field_description, DOCUMENT_CONFIGS

logger = logging.getLogger(__name__)


def create_dash_app(tesseract_cmd: Optional[str] = None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
    
    Args:
        tesseract_cmd: –ü—É—Ç—å –∫ Tesseract
        
    Returns:
        Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    doc_processor = DocumentProcessor(tesseract_cmd)
    image_processor = AdvancedImageProcessor()
    
    # Dash –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ assets/
    app = dash.Dash(
        __name__,
        external_stylesheets=[
            dbc.themes.BOOTSTRAP,
            dbc.icons.FONT_AWESOME
        ],
        title="OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞",
        suppress_callback_exceptions=True
    )
    
    app.layout = create_main_layout()
    setup_callbacks(app, doc_processor, image_processor)
    
    logger.info("Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
    
    return app


def create_main_layout() -> html.Div:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ layout —Å —á–µ—Ç—ã—Ä—å–º—è —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã"""
    return dbc.Container([
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        dbc.Alert([
            html.H1([
                html.I(className="fas fa-brain me-3"),
                "OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
            ], className="mb-2"),
            html.P("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", className="mb-0")
        ], color="primary", className="mb-4 main-header"),
        
        # –í–∫–ª–∞–¥–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
        dbc.Tabs([
            # –†–µ–∂–∏–º 1: –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            dbc.Tab(
                label="üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ",
                tab_id="quick-ocr",
                children=create_quick_ocr_tab()
            ),
            
            # –†–µ–∂–∏–º 2: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
            dbc.Tab(
                label="üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞",
                tab_id="interactive-markup",
                children=create_interactive_markup_tab()
            ),
            
            # –†–µ–∂–∏–º 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            dbc.Tab(
                label="üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                tab_id="batch-processing",
                children=create_batch_processing_tab()
            ),
            
            # –†–µ–∂–∏–º 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            dbc.Tab(
                label="‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                tab_id="config-creator",
                children=create_config_creator_tab()
            )
        ], id="main-tabs", active_tab="quick-ocr", className="mb-4"),
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        dcc.Store(id='global-pdf-store'),
        dcc.Store(id='global-config-store'),
        dcc.Store(id='global-results-store'),
        dcc.Store(id='markup-boxes-store', data={}),
        dcc.Store(id='current-image-store'),
        dcc.Store(id='processing-status-store', data={'status': 'idle', 'progress': 0}),
        
        # Interval –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        dcc.Interval(id='progress-interval', interval=200, n_intervals=0, disabled=True),
        
    ], fluid=True, className="py-4")


def create_quick_ocr_tab() -> html.Div:
    """–†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    return html.Div([
        dbc.Row([
            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-file-upload me-2"),
                        "–®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç"
                    ], className="fw-bold"),
                    dbc.CardBody([
                        dcc.Upload(
                            id='quick-upload',
                            children=dbc.Alert([
                                html.I(className="fas fa-cloud-upload-alt fa-3x mb-3 text-primary"),
                                html.Br(),
                                html.H5("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                                html.Small("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: PDF, PNG, JPG (–¥–æ 50MB)", className="text-muted")
                            ], color="light", className="text-center py-4 upload-area"),
                            style={
                                'borderWidth': '2px',
                                'borderStyle': 'dashed',
                                'borderRadius': '10px',
                                'cursor': 'pointer'
                            },
                            multiple=False
                        ),
                        html.Div(id="quick-upload-status", className="mt-2")
                    ])
                ], className="mb-3 result-card"),
                
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-cog me-2"),
                        "–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                    ], className="fw-bold"),
                    dbc.CardBody([
                        dbc.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"),
                        dcc.Dropdown(
                            id='quick-config-select',
                            options=get_config_options(),
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø..."
                        ),
                        html.Hr(),
                        dbc.Label("–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"),
                        dcc.Dropdown(
                            id='quick-rotation',
                            options=[
                                {'label': '0¬∞ (–±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞)', 'value': 0},
                                {'label': '90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π ‚Üª', 'value': 90},
                                {'label': '180¬∞ ‚Üª', 'value': 180},
                                {'label': '270¬∞ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π ‚Ü∫', 'value': 270}
                            ],
                            value=0
                        ),
                        html.Hr(),
                        dbc.Checklist(
                            options=[
                                {"label": " –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞", "value": 1},
                            ],
                            value=[1],
                            id="quick-enhance-check",
                            switch=True,
                        )
                    ])
                ], className="mb-3 result-card"),
                
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-play me-2"),
                        "–®–∞–≥ 3: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"
                    ], className="fw-bold"),
                    dbc.CardBody([
                        dbc.Button(
                            [html.I(className="fas fa-rocket me-2"), "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"],
                            id="quick-run-btn",
                            color="success",
                            size="lg",
                            className="w-100 mb-3",
                            disabled=True
                        ),
                        html.Div(id="quick-progress-panel")
                    ])
                ], className="result-card")
            ], width=4),
            
            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            dbc.Col([
                html.Div(id="quick-preview-panel"),
                html.Div(id="quick-results-panel", className="ocr-result")
            ], width=8)
        ])
    ])


def create_interactive_markup_tab() -> html.Div:
    """–†–µ–∂–∏–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏ —Å Plotly"""
    return html.Div([
        dbc.Row([
            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-file-pdf me-2"),
                        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                    ]),
                    dbc.CardBody([
                        dcc.Upload(
                            id='markup-upload',
                            children=dbc.Alert([
                                html.I(className="fas fa-file-pdf fa-2x mb-2 text-primary"),
                                html.Br(),
                                html.Strong("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü"),
                                html.Br(),
                                html.Small("PDF, PNG, JPG")
                            ], color="light", className="text-center py-3 upload-area"),
                            style={
                                'borderWidth': '2px',
                                'borderStyle': 'dashed',
                                'borderRadius': '8px',
                                'cursor': 'pointer'
                            }
                        ),
                        html.Div(id="markup-upload-info", className="mt-2")
                    ])
                ], className="mb-3"),
                
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-list me-2"),
                        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
                    ]),
                    dbc.CardBody([
                        dbc.Label("–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"),
                        dcc.Dropdown(
                            id='markup-base-config',
                            options=[{'label': 'üÜï –ù–æ–≤–∞—è (–ø—É—Å—Ç–∞—è)', 'value': 'empty'}] + get_config_options(),
                            value='empty'
                        ),
                        html.Hr(),
                        dbc.Label("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"),
                        dbc.RadioItems(
                            id='markup-mode',
                            options=[
                                {'label': 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–µ–π', 'value': 'view'},
                                {'label': '‚úèÔ∏è –†–∏—Å–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–µ–π', 'value': 'draw'},
                                {'label': 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'value': 'edit'}
                            ],
                            value='view',
                            inline=False
                        ),
                        html.Small("–í —Ä–µ–∂–∏–º–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫–ª–∏–∫–Ω–∏—Ç–µ –∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º—ã—à—å—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏", 
                                 className="text-muted d-block mt-2")
                    ])
                ], className="mb-3"),
                
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-th-list me-2"),
                        "–ü–æ–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                    ]),
                    dbc.CardBody([
                        html.Div(id="markup-fields-panel"),
                        dbc.Button(
                            [html.I(className="fas fa-plus me-2"), "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ"],
                            id="add-field-btn",
                            color="secondary",
                            size="sm",
                            outline=True,
                            className="w-100 mt-2"
                        )
                    ])
                ], className="mb-3"),
                
                dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-tools me-2"),
                        "–î–µ–π—Å—Ç–≤–∏—è"
                    ]),
                    dbc.CardBody([
                        dbc.Button(
                            [html.I(className="fas fa-play me-2"), "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π"],
                            id="markup-run-ocr",
                            color="success",
                            className="w-100 mb-2"
                        ),
                        dbc.Button(
                            [html.I(className="fas fa-save me-2"), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"],
                            id="markup-save-config",
                            color="primary",
                            className="w-100 mb-2"
                        ),
                        dbc.Button(
                            [html.I(className="fas fa-download me-2"), "–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"],
                            id="markup-export-json",
                            color="info",
                            className="w-100"
                        )
                    ])
                ])
            ], width=3),
            
            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader([
                        html.Span([
                            html.I(className="fas fa-crosshairs me-2"),
                            "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞"
                        ], className="me-3"),
                        dbc.Badge(id="markup-status-badge", color="secondary", children="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    ]),
                    dbc.CardBody([
                        dcc.Graph(
                            id='markup-interactive-image',
                            config={
                                'displayModeBar': True,
                                'displaylogo': False,
                                'modeBarButtonsToAdd': ['drawrect', 'eraseshape'],
                                'modeBarButtonsToRemove': ['lasso2d', 'select2d', 'zoom2d', 'pan2d']
                            },
                            style={'height': '70vh'}
                        ),
                        html.Div(id="markup-coordinates-display", className="mt-3")
                    ])
                ], className="mb-3 result-card"),
                
                html.Div(id="markup-ocr-results")
            ], width=9)
        ])
    ])


def create_batch_processing_tab() -> html.Div:
    """–†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    return html.Div([
        dbc.Alert([
            html.I(className="fas fa-info-circle me-2"),
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞."
        ], color="info", className="mb-3"),
        
        dbc.Card([
            dbc.CardHeader([
                html.I(className="fas fa-folder-open me-2"),
                "–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"
            ], className="fw-bold"),
            dbc.CardBody([
                dcc.Upload(
                    id='batch-upload',
                    children=dbc.Alert([
                        html.I(className="fas fa-folder-open fa-3x mb-3 text-primary"),
                        html.Br(),
                        html.H5("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª–æ–≤"),
                        html.Small("–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
                    ], color="light", className="text-center py-5 upload-area"),
                    style={
                        'borderWidth': '3px',
                        'borderStyle': 'dashed',
                        'borderRadius': '10px',
                        'cursor': 'pointer'
                    },
                    multiple=True
                ),
                
                html.Hr(),
                
                dbc.Row([
                    dbc.Col([
                        dbc.Label("–¢–∏–ø –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"),
                        dcc.Dropdown(
                            id='batch-config-select',
                            options=get_config_options(),
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω—ã–π —Ç–∏–ø"
                        )
                    ], width=8),
                    dbc.Col([
                        html.Br(),
                        dbc.Button(
                            [html.I(className="fas fa-cogs me-2"), "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ"],
                            id="batch-process-btn",
                            color="primary",
                            size="lg",
                            className="w-100",
                            disabled=True
                        )
                    ], width=4)
                ])
            ])
        ], className="mb-3 result-card"),
        
        html.Div(id="batch-progress-panel", className="mb-3"),
        html.Div(id="batch-results-panel")
    ])


def create_config_creator_tab() -> html.Div:
    """–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    return html.Div([
        dbc.Alert([
            html.H5([html.I(className="fas fa-magic me-2"), "–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"]),
            html.P("–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—à–∞–≥–æ–≤–æ", className="mb-0")
        ], color="success", className="mb-3"),
        
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader("–®–∞–≥ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
                    dbc.CardBody([
                        dbc.Label("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"),
                        dbc.Input(
                            id="config-name-input", 
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–ì–£ - –î–∏–ø–ª–æ–º 2024",
                            className="mb-3"
                        ),
                        dbc.Label("–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):"),
                        dbc.Input(
                            id="config-org-input", 
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: MSU",
                            className="mb-3"
                        ),
                        dbc.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"),
                        dcc.Dropdown(
                            id="config-type-select",
                            options=[
                                {'label': '–î–∏–ø–ª–æ–º –æ –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ', 'value': 'diploma'},
                                {'label': '–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'value': 'certificate'},
                                {'label': '–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ', 'value': 'attestation'},
                                {'label': '–î—Ä—É–≥–æ–µ', 'value': 'other'}
                            ],
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
                        )
                    ])
                ])
            ], width=6),
            
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader("–®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑—Ü–∞"),
                    dbc.CardBody([
                        dcc.Upload(
                            id='config-sample-upload',
                            children=html.Div([
                                html.I(className="fas fa-image fa-2x mb-2 text-info"),
                                html.Br(),
                                "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                            ], className="text-center py-4 upload-area"),
                            style={
                                'borderWidth': '2px',
                                'borderStyle': 'dashed',
                                'borderRadius': '8px',
                                'padding': '20px',
                                'cursor': 'pointer'
                            }
                        ),
                        html.Div(id="config-sample-preview", className="mt-3")
                    ])
                ])
            ], width=6)
        ], className="mb-3"),
        
        dbc.Card([
            dbc.CardHeader("–®–∞–≥ 3: –†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π"),
            dbc.CardBody([
                dbc.Alert([
                    html.I(className="fas fa-arrow-right me-2"),
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ–ª–µ–π"
                ], color="info"),
                dbc.Button(
                    [html.I(className="fas fa-external-link-alt me-2"), "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ ‚Üí"],
                    id="goto-markup-btn",
                    color="info",
                    outline=True
                )
            ])
        ], className="mb-3"),
        
        dbc.Card([
            dbc.CardHeader("–®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
            dbc.CardBody([
                dbc.Button(
                    [html.I(className="fas fa-code me-2"), "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Python –∫–æ–¥"],
                    id="generate-config-code-btn",
                    color="success",
                    className="mb-3"
                ),
                html.Pre(
                    id="generated-config-code", 
                    style={
                        'backgroundColor': '#f8f9fa', 
                        'padding': '15px',
                        'borderRadius': '5px',
                        'maxHeight': '400px',
                        'overflow': 'auto'
                    }
                ),
                dbc.Button(
                    [html.I(className="fas fa-copy me-2"), "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"],
                    id="copy-config-code-btn",
                    color="primary",
                    size="sm",
                    className="mt-2"
                )
            ])
        ])
    ])


def get_config_options() -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    configs = get_available_configs()
    return [{'label': f"{c['organization']} - {c['name']}", 'value': c['id']} for c in configs]


def create_interactive_plotly_image(img: Image.Image, boxes: Dict = None, 
                                   mode: str = 'view') -> go.Figure:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Plotly
    
    Args:
        img: PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        boxes: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ–ª–µ–π {field_name: (x1, y1, x2, y2)}
        mode: –†–µ–∂–∏–º ('view', 'draw', 'edit')
    """
    img_array = np.array(img)
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    fig.add_trace(go.Image(z=img_array))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –ø–æ–ª–µ–π
    if boxes:
        colors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan', 'magenta', 'yellow']
        for i, (field_name, box) in enumerate(boxes.items()):
            if box and len(box) == 4:
                x0, y0, x1, y1 = box
                color = colors[i % len(colors)]
                
                # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                fig.add_shape(
                    type="rect",
                    x0=x0, y0=y0, x1=x1, y1=y1,
                    line=dict(color=color, width=3),
                    name=field_name
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
                fig.add_annotation(
                    x=x0, y=y0,
                    text=get_field_description(field_name),
                    showarrow=False,
                    bgcolor=color,
                    font=dict(color='white', size=12),
                    yshift=-10
                )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ layout
    fig.update_layout(
        dragmode='drawrect' if mode == 'draw' else 'pan',
        newshape=dict(line=dict(color='red', width=3)),
        height=800,
        margin=dict(l=0, r=0, t=0, b=0),
        xaxis=dict(showgrid=False, showticklabels=False, zeroline=False),
        yaxis=dict(showgrid=False, showticklabels=False, zeroline=False, scaleanchor="x"),
        plot_bgcolor='white'
    )
    
    return fig


def setup_callbacks(app, doc_processor, image_processor):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö callbacks"""
    
    # Callback: –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ PDF —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    @app.callback(
        [Output('quick-preview-panel', 'children'),
         Output('global-pdf-store', 'data'),
         Output('quick-run-btn', 'disabled'),
         Output('quick-upload-status', 'children')],
        [Input('quick-upload', 'contents')],
        [State('quick-upload', 'filename')]
    )
    def quick_load_pdf(contents, filename):
        if not contents:
            return no_update, no_update, True, ""
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
            loading_status = dbc.Spinner(
                html.Small("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞..."), 
                color="primary",
                size="sm"
            )
            
            content_type, content_string = contents.split(',')
            decoded = base64.b64decode(content_string)
            
            images = image_processor.convert_pdf_from_bytes(decoded)
            
            if not images:
                error = dbc.Alert("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", color="danger", className="small")
                return None, None, True, error
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images_b64 = []
            for img in images:
                img_resized = image_processor.resize_image(img)
                buffer = io.BytesIO()
                img_resized.save(buffer, format='PNG')
                img_b64 = base64.b64encode(buffer.getvalue()).decode()
                images_b64.append(img_b64)
            
            # –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            preview = dbc.Card([
                dbc.CardHeader([
                    html.I(className="fas fa-file-pdf me-2"),
                    f"{filename}",
                    dbc.Badge(f"{len(images)} —Å—Ç—Ä.", color="info", className="ms-2")
                ]),
                dbc.CardBody([
                    html.Img(
                        src=f"data:image/png;base64,{images_b64[0]}",
                        style={'width': '100%', 'maxHeight': '600px', 'objectFit': 'contain'},
                        className="border rounded"
                    )
                ])
            ], className="result-card")
            
            success_status = dbc.Alert([
                html.I(className="fas fa-check-circle me-2"),
                f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(images)} —Å—Ç—Ä."
            ], color="success", className="small")
            
            return preview, images_b64, False, success_status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            error = dbc.Alert(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", color="danger", className="small")
            return None, None, True, error
    
    # Callback: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    @app.callback(
        Output('quick-preview-panel', 'children', allow_duplicate=True),
        [Input('quick-config-select', 'value')],
        [State('global-pdf-store', 'data'),
         State('quick-upload', 'filename')],
        prevent_initial_call=True
    )
    def show_fields_preview(config_id, pdf_data, filename):
        if not config_id or not pdf_data:
            raise PreventUpdate
        
        try:
            config = get_config(config_id)
            
            img_data = base64.b64decode(pdf_data[0])
            img = Image.open(io.BytesIO(img_data))
            
            img_with_boxes = doc_processor.display_image_with_boxes(img, config.fields)
            
            buffer = io.BytesIO()
            img_with_boxes.save(buffer, format='PNG')
            img_b64 = base64.b64encode(buffer.getvalue()).decode()
            
            preview = dbc.Card([
                dbc.CardHeader([
                    html.I(className="fas fa-file-pdf me-2"),
                    f"{filename}",
                    dbc.Badge(config.name, color="info", className="ms-2")
                ]),
                dbc.CardBody([
                    html.Img(
                        src=f"data:image/png;base64,{img_b64}",
                        style={'width': '100%', 'maxHeight': '600px', 'objectFit': 'contain'},
                        className="border rounded"
                    ),
                    html.Small([
                        html.I(className="fas fa-info-circle me-1"),
                        f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–ª—è: {len(config.fields)}"
                    ], className="text-muted d-block mt-2")
                ])
            ], className="result-card")
            
            return preview
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
            raise PreventUpdate
    
    # Callback: –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    @app.callback(
        [Output('quick-results-panel', 'children'),
         Output('quick-progress-panel', 'children'),
         Output('global-results-store', 'data')],
        [Input('quick-run-btn', 'n_clicks')],
        [State('global-pdf-store', 'data'),
         State('quick-config-select', 'value'),
         State('quick-rotation', 'value'),
         State('quick-enhance-check', 'value')]
    )
    def quick_run_ocr(n_clicks, pdf_data, config_id, rotation, enhance):
        if not n_clicks or not pdf_data or not config_id:
            raise PreventUpdate
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress = dbc.Progress(
                value=10,
                label="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
                striped=True,
                animated=True,
                color="success",
                className="mb-2",
                style={'height': '30px'}
            )
            
            config = get_config(config_id)
            uncertainty_engine = UncertaintyEngine(config.organization)
            
            all_results = []
            total_pages = len(pdf_data)
            
            for page_num, img_b64 in enumerate(pdf_data):
                img_data = base64.b64decode(img_b64)
                img = Image.open(io.BytesIO(img_data))
                
                if rotation:
                    img = image_processor.rotate_image(img, rotation)
                
                if enhance and 1 in enhance:
                    img = image_processor.enhance_image_advanced(img)
                
                result = doc_processor.extract_fields(img, config, uncertainty_engine)
                result['page'] = page_num + 1
                
                # –ú–∏–Ω–∏–∞—Ç—é—Ä—ã –ø–æ–ª–µ–π
                result['field_thumbnails'] = {}
                for field_config in config.fields:
                    field_name = field_config['name']
                    box = field_config.get('box')
                    
                    if box:
                        thumbnail = doc_processor.crop_field_thumbnail(img, box)
                        thumb_buffer = io.BytesIO()
                        thumbnail.save(thumb_buffer, format='PNG')
                        thumb_b64 = base64.b64encode(thumb_buffer.getvalue()).decode()
                        result['field_thumbnails'][field_name] = thumb_b64
                
                all_results.append(result)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_ui = create_results_interface(all_results, config)
            
            success_status = dbc.Alert([
                html.I(className="fas fa-check-circle me-2"),
                f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
            ], color="success")
            
            return results_ui, success_status, all_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}", exc_info=True)
            error = dbc.Alert([
                html.I(className="fas fa-exclamation-triangle me-2"),
                f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}"
            ], color="danger")
            return error, error, None
    
    # Callback: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    @app.callback(
        [Output('markup-interactive-image', 'figure'),
         Output('current-image-store', 'data'),
         Output('markup-upload-info', 'children')],
        [Input('markup-upload', 'contents'),
         Input('markup-base-config', 'value'),
         Input('markup-mode', 'value')],
        [State('markup-upload', 'filename')]
    )
    def update_interactive_image(contents, base_config, mode, filename):
        if not contents:
            empty_fig = go.Figure()
            empty_fig.update_layout(
                xaxis=dict(visible=False),
                yaxis=dict(visible=False),
                annotations=[{
                    'text': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
                    'xref': 'paper',
                    'yref': 'paper',
                    'showarrow': False,
                    'font': {'size': 20, 'color': 'gray'}
                }]
            )
            return empty_fig, None, ""
        
        try:
            content_type, content_string = contents.split(',')
            decoded = base64.b64decode(content_string)
            
            images = image_processor.convert_pdf_from_bytes(decoded)
            img = images[0]
            
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            img_b64 = base64.b64encode(buffer.getvalue()).decode()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º boxes –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
            boxes = {}
            if base_config and base_config != 'empty':
                config = get_config(base_config)
                for field in config.fields:
                    boxes[field['name']] = field.get('box')
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∏–≥—É—Ä—É
            fig = create_interactive_plotly_image(img, boxes, mode)
            
            info = dbc.Alert([
                html.I(className="fas fa-check me-2"),
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {filename} ({img.size[0]}√ó{img.size[1]}px)"
            ], color="success", className="small")
            
            return fig, img_b64, info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏: {e}")
            empty_fig = go.Figure()
            error_info = dbc.Alert(f"–û—à–∏–±–∫–∞: {str(e)}", color="danger", className="small")
            return empty_fig, None, error_info
    
    # Callback: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    @app.callback(
        [Output('markup-coordinates-display', 'children'),
         Output('markup-status-badge', 'children'),
         Output('markup-status-badge', 'color')],
        [Input('markup-interactive-image', 'relayoutData')]
    )
    def display_drawn_coordinates(relayout_data):
        if not relayout_data:
            return "", "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "secondary"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä
        if 'shapes' in relayout_data:
            shapes = relayout_data['shapes']
            if shapes:
                coords_info = []
                for i, shape in enumerate(shapes):
                    if shape['type'] == 'rect':
                        x0 = int(shape['x0'])
                        y0 = int(shape['y0'])
                        x1 = int(shape['x1'])
                        y1 = int(shape['y1'])
                        coords_info.append(
                            html.Li(f"–û–±–ª–∞—Å—Ç—å {i+1}: ({x0}, {y0}, {x1}, {y1})")
                        )
                
                if coords_info:
                    alert = dbc.Alert([
                        html.H6([
                            html.I(className="fas fa-vector-square me-2"),
                            "–ù–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏:"
                        ]),
                        html.Ul(coords_info, className="mb-0")
                    ], color="info")
                    
                    return alert, f"{len(shapes)} –æ–±–ª–∞—Å—Ç–µ–π", "success"
        
        return "", "–†–∏—Å—É–π—Ç–µ –æ–±–ª–∞—Å—Ç–∏", "warning"
    
    # Callback: –ü—Ä–∏–Ω—è—Ç–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    @app.callback(
        Output({'type': 'field-status', 'page': MATCH, 'field': MATCH}, 'children'),
        [Input({'type': 'accept-btn', 'page': MATCH, 'field': MATCH}, 'n_clicks')],
        prevent_initial_call=True
    )
    def accept_field_correction(n_clicks):
        if not n_clicks:
            raise PreventUpdate
        
        return html.Span([
            html.I(className="fas fa-check-circle text-success me-1"),
            "‚úì"
        ])


def create_results_interface(results: List[Dict], config) -> html.Div:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    components = [
        create_summary_panel(results, config),
        html.Hr()
    ]
    
    for page_result in results:
        page_table = create_editable_page_table(page_result, config)
        components.append(page_table)
    
    return html.Div(components)


def create_editable_page_table(page_result: Dict, config) -> dbc.Card:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    page_num = page_result['page']
    uncertainties = page_result.get('uncertainties', [])
    uncertain_fields = {u['field'] for u in uncertainties}
    field_thumbnails = page_result.get('field_thumbnails', {})
    
    table_rows = []
    
    for field_config in config.fields:
        field_name = field_config['name']
        field_display = get_field_description(field_name)
        
        if field_name == 'series_and_number':
            value = f"{page_result.get('series', '')} {page_result.get('number', '')}".strip()
        else:
            value = page_result.get(field_name, '')
        
        thumb_b64 = field_thumbnails.get(field_name, '')
        is_uncertain = field_name in uncertain_fields
        
        row_class = "table-warning" if is_uncertain else ""
        
        row = html.Tr([
            html.Td([
                html.I(className="fas fa-exclamation-triangle text-warning me-1") if is_uncertain else "",
                field_display
            ], style={'width': '20%'}),
            html.Td([
                html.Img(
                    src=f"data:image/png;base64,{thumb_b64}",
                    style={'maxWidth': '120px', 'maxHeight': '80px', 'objectFit': 'contain'},
                    className="border"
                ) if thumb_b64 else "‚Äî"
            ], style={'width': '15%', 'textAlign': 'center'}),
            html.Td([
                dcc.Input(
                    id={'type': 'field-input', 'page': page_num, 'field': field_name},
                    value=str(value),
                    style={
                        'width': '100%', 
                        'backgroundColor': '#fff3cd' if is_uncertain else '#fff',
                        'padding': '8px'
                    },
                    className="form-control"
                )
            ], style={'width': '45%'}),
            html.Td([
                dbc.Button(
                    "‚úì",
                    id={'type': 'accept-btn', 'page': page_num, 'field': field_name},
                    color="success",
                    size="sm",
                    className="me-2"
                ),
                html.Span(
                    id={'type': 'field-status', 'page': page_num, 'field': field_name}
                )
            ], style={'width': '20%'})
        ], className=row_class)
        
        table_rows.append(row)
    
    return dbc.Card([
        dbc.CardHeader([
            html.I(className="fas fa-file-alt me-2"),
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}"
        ], className="fw-bold"),
        dbc.CardBody([
            dbc.Table([
                html.Thead([html.Tr([
                    html.Th("–ü–æ–ª–µ"),
                    html.Th("–ü—Ä–µ–≤—å—é"),
                    html.Th("–ó–Ω–∞—á–µ–Ω–∏–µ"),
                    html.Th("–î–µ–π—Å—Ç–≤–∏–µ")
                ])]),
                html.Tbody(table_rows)
            ], bordered=True, hover=True, responsive=True)
        ])
    ], className="mb-4 result-card")


def create_summary_panel(results: List[Dict], config) -> dbc.Card:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º"""
    total_pages = len(results)
    total_uncertainties = sum(len(r.get('uncertainties', [])) for r in results)
    
    export_data = []
    for result in results:
        export_data.append({
            '–°—Ç—Ä–∞–Ω–∏—Ü–∞': result['page'],
            '–§–ò–û': result.get('full_name', ''),
            '–°–µ—Ä–∏—è': result.get('series', ''),
            '–ù–æ–º–µ—Ä': result.get('number', ''),
            '–†–µ–≥.–Ω–æ–º–µ—Ä': result.get('registration_number', ''),
            '–î–∞—Ç–∞': result.get('issue_date', '')
        })
    
    df = pd.DataFrame(export_data)
    csv_buffer = io.StringIO()
    df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
    csv_b64 = base64.b64encode(csv_buffer.getvalue().encode()).decode()
    
    json_str = json.dumps(export_data, ensure_ascii=False, indent=2)
    json_b64 = base64.b64encode(json_str.encode()).decode()
    
    return dbc.Card([
        dbc.CardHeader([
            html.I(className="fas fa-chart-bar me-2"),
            "–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        ], className="fw-bold"),
        dbc.CardBody([
            dbc.Row([
                dbc.Col([
                    html.H4([
                        html.I(className="fas fa-file-alt me-2"),
                        f"{total_pages}"
                    ]),
                    html.P("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü", className="text-muted"),
                    html.Hr(),
                    html.P(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}", className="small"),
                    html.P([
                        html.I(className="fas fa-exclamation-triangle text-warning me-1") if total_uncertainties > 0 else html.I(className="fas fa-check-circle text-success me-1"),
                        f"{total_uncertainties} –ø–æ–ª–µ–π —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏" if total_uncertainties > 0 else "–í—Å–µ –ø–æ–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —É–≤–µ—Ä–µ–Ω–Ω–æ"
                    ], className="small")
                ], width=6),
                dbc.Col([
                    html.H6("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", className="mb-3"),
                    html.A(
                        dbc.Button([
                            html.I(className="fas fa-file-csv me-2"), 
                            "–°–∫–∞—á–∞—Ç—å CSV"
                        ], 
                        color="success", 
                        className="w-100 mb-2 export-btn"),
                        href=f"data:text/csv;charset=utf-8;base64,{csv_b64}",
                        download=f"ocr_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                    ),
                    html.A(
                        dbc.Button([
                            html.I(className="fas fa-file-code me-2"), 
                            "–°–∫–∞—á–∞—Ç—å JSON"
                        ], 
                        color="info", 
                        className="w-100 export-btn"),
                        href=f"data:application/json;base64,{json_b64}",
                        download=f"ocr_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                    )
                ], width=6)
            ])
        ])
    ], className="mb-4 result-card")


if __name__ == '__main__':
    app = create_dash_app()
    app.run(debug=True, port=8050)
