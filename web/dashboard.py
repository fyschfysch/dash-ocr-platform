"""
–û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –±–∞–∑–µ Dash 3.0+
–ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ Streamlit —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
"""

import dash
from dash import dcc, html, Input, Output, State, callback_context, clientside_callback
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import plotly.graph_objects as go
import plotly.express as px

import fitz  # PyMuPDF
from PIL import Image
import pandas as pd
import numpy as np
import io
import base64
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
import logging

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.ocr_engine import DocumentProcessor
from core.image_processor import AdvancedImageProcessor, ImageAnalyzer, RegionProcessor
from core.config import get_available_configs, get_config, get_field_description, UncertaintyEngine
from core.parsers import ParserRegistry
from web.markup_tool import MarkupTool, setup_markup_callbacks, MarkupIntegration

logger = logging.getLogger(__name__)


class OCRDashboard:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è Dash 3.0+
    """
    
    def __init__(self, tesseract_cmd: Optional[str] = None):
        """
        Args:
            tesseract_cmd: –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Tesseract
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.doc_processor = DocumentProcessor(tesseract_cmd)
        self.image_processor = AdvancedImageProcessor()
        self.image_analyzer = ImageAnalyzer()
        self.region_processor = RegionProcessor()
        self.markup_tool = MarkupTool()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ 3.0+
        self.app = dash.Dash(
            __name__,
            external_stylesheets=[
                dbc.themes.BOOTSTRAP, 
                dbc.icons.FONT_AWESOME,
                "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
            ],
            title="üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            suppress_callback_exceptions=True,
            assets_folder=os.path.join(os.path.dirname(__file__), '..', 'static')
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        self.app.layout = self.create_main_layout()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callbacks
        self.setup_callbacks()
        # setup_markup_callbacks(self.app, self.markup_tool)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        
        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ callbacks –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.setup_clientside_callbacks()
    
    def create_main_layout(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        return dbc.Container([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            html.Div([
                html.H1([
                    html.I(className="fas fa-search me-3"),
                    "OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                ], className="mb-2"),
                html.P(
                    "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ–ª–µ–π",
                    className="lead mb-0"
                )
            ], className="main-header mb-4"),
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
            dbc.Tabs([
                dbc.Tab(
                    label=[html.I(className="fas fa-file-pdf me-2"), "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"],
                    tab_id="ocr-tab",
                    children=self.create_ocr_tab(),
                    className="fw-bold"
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-crosshairs me-2"), "–†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π"],
                    tab_id="markup-tab", 
                    children=html.Div("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"),  # –£–ø—Ä–æ—â–µ–Ω–æ
                    className="fw-bold"
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-chart-bar me-2"), "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                    tab_id="analytics-tab",
                    children=self.create_analytics_tab(),
                    className="fw-bold"
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-info-circle me-2"), "–°–ø—Ä–∞–≤–∫–∞"],
                    tab_id="help-tab",
                    children=self.create_help_tab(),
                    className="fw-bold"
                )
            ], id="main-tabs", active_tab="ocr-tab", className="mb-4"),
            
            # –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            self.create_modals(),
            
            # –°–∫—Ä—ã—Ç—ã–µ div –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            dcc.Store(id="pdf-pages-store"),
            dcc.Store(id="ocr-results-store"),
            dcc.Store(id="processing-status-store"),
            dcc.Store(id="image-quality-store"),
            
        ], fluid=True, className="py-4")
    
    def create_ocr_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è OCR
        """
        return html.Div([
            # –ü–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            dbc.Card([
                dbc.CardHeader([
                    html.I(className="fas fa-cloud-upload-alt me-2"),
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                ], className="fw-bold"),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            dcc.Upload(
                                id='upload-document',
                                children=html.Div([
                                    html.I(className="fas fa-cloud-upload-alt fa-4x mb-3 text-primary"),
                                    html.H5("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞", className="mb-2"),
                                    html.P("–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞", className="text-muted mb-2"),
                                    html.Small("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: PDF –¥–æ 50MB", className="text-muted")
                                ], className="text-center"),
                                style={
                                    'width': '100%', 'height': '180px',
                                    'lineHeight': '60px', 'borderWidth': '3px',
                                    'borderStyle': 'dashed', 'borderRadius': '15px',
                                    'borderColor': '#007bff', 'backgroundColor': '#f8f9fa',
                                    'cursor': 'pointer', 'transition': 'all 0.3s ease'
                                },
                                className="upload-area",
                                multiple=False,
                                accept='.pdf'
                            )
                        ], width=8),
                        
                        dbc.Col([
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            dbc.Card([
                                dbc.CardHeader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", className="py-2"),
                                dbc.CardBody([
                                    html.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", className="fw-bold mb-2"),
                                    dcc.Dropdown(
                                        id='config-selector',
                                        options=[
                                            {'label': 'üè¢ 1–¢ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': '1T_CERTIFICATE'},
                                            {'label': 'üè¢ 1–¢ - –î–∏–ø–ª–æ–º', 'value': '1T_DIPLOMA'},
                                            {'label': 'üèõÔ∏è –†–û–°–ù–û–£ - –î–∏–ø–ª–æ–º', 'value': 'ROSNOU_DIPLOMA'},
                                            {'label': 'üèõÔ∏è –†–û–°–ù–û–£ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': 'ROSNOU_CERTIFICATE'},
                                            {'label': 'üè¶ –§–∏–Ω–£–Ω–∏–≤ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ v1', 'value': 'FINUNIV_CERT_V1'},
                                            {'label': 'üè¶ –§–∏–Ω–£–Ω–∏–≤ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ v2', 'value': 'FINUNIV_CERT_V2'}
                                        ],
                                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                                        className="mb-3"
                                    ),
                                    
                                    html.Label("–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", className="fw-bold mb-2"),
                                    dcc.Dropdown(
                                        id='rotation-selector',
                                        options=[
                                            {'label': '‚ÜïÔ∏è –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞', 'value': 0},
                                            {'label': '‚Üª 90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π', 'value': 90},
                                            {'label': '‚Ü∂ 180¬∞', 'value': 180},
                                            {'label': '‚Ü∫ 270¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π', 'value': 270}
                                        ],
                                        value=0,
                                        className="mb-3"
                                    ),
                                    
                                    dbc.Button(
                                        [html.I(className="fas fa-rocket me-2"), "–ó–∞–ø—É—Å—Ç–∏—Ç—å OCR"],
                                        id="run-ocr-btn",
                                        color="primary",
                                        size="lg",
                                        disabled=True,
                                        className="w-100 fw-bold"
                                    )
                                ], className="p-3")
                            ], className="shadow-sm")
                        ], width=4)
                    ])
                ])
            ], className="mb-4 shadow-sm"),
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            html.Div(id="status-panel"),
            
            # –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
            html.Div(id="pdf-preview-panel", className="mb-4"),
            
            # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
            html.Div(id="ocr-results-panel")
        ])
    
    def create_analytics_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        """
        return html.Div([
            dbc.Card([
                dbc.CardHeader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
                dbc.CardBody([
                    html.Div(id="analytics-content", children=[
                        html.P("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", 
                              className="text-muted text-center py-5")
                    ])
                ])
            ])
        ])
    
    def create_help_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
        """
        return html.Div([
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-building me-2"),
                            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                        ]),
                        dbc.CardBody([
                            # 1–¢
                            html.Div([
                                html.H5([
                                    html.I(className="fas fa-certificate me-2 text-primary"),
                                    "1–¢"
                                ]),
                                html.Ul([
                                    html.Li([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                    ]),
                                    html.Li([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ"
                                    ])
                                ])
                            ], className="mb-4"),
                            
                            # –†–û–°–ù–û–£
                            html.Div([
                                html.H5([
                                    html.I(className="fas fa-university me-2 text-info"),
                                    "–†–û–°–ù–û–£ (–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)"
                                ]),
                                html.Ul([
                                    html.Li([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                    ]),
                                    html.Li([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ"
                                    ])
                                ])
                            ], className="mb-4"),
                            
                            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
                            html.Div([
                                html.H5([
                                    html.I(className="fas fa-landmark me-2 text-warning"),
                                    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
                                ]),
                                html.Ul([
                                    html.Li([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 1) - –§–ò–û –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"
                                    ]),
                                    html.Li([
                                        html.I(className="fas fa-exclamation-triangle me-2 text-warning"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 2) - –§–ò–û –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫–∞—Ö –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ"
                                    ])
                                ])
                            ])
                        ])
                    ], className="shadow-sm")
                ], width=6),
                
                dbc.Col([
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –ø–æ–ª—è
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-list-check me-2"),
                            "–ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –ø–æ–ª—è"
                        ]),
                        dbc.CardBody([
                            html.Ul([
                                html.Li([
                                    html.I(className="fas fa-user me-2 text-primary"),
                                    html.Strong("–§–ò–û"),
                                    " (–≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)"
                                ]),
                                html.Li([
                                    html.I(className="fas fa-id-card me-2 text-info"),
                                    html.Strong("–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä"),
                                    " –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                                ]),
                                html.Li([
                                    html.I(className="fas fa-hashtag me-2 text-success"),
                                    html.Strong("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
                                ]),
                                html.Li([
                                    html.I(className="fas fa-calendar me-2 text-warning"),
                                    html.Strong("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"),
                                    " (–≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ)"
                                ])
                            ])
                        ])
                    ], className="shadow-sm mb-4"),
                    
                    # –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-lightbulb me-2"),
                            "–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                        ]),
                        dbc.CardBody([
                            html.Ul([
                                html.Li([
                                    html.I(className="fas fa-file-pdf me-2 text-danger"),
                                    "–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ PDF —Ñ–∞–π–ª—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"
                                ]),
                                html.Li([
                                    html.I(className="fas fa-cog me-2 text-primary"),
                                    "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                                ]),
                                html.Li([
                                    html.I(className="fas fa-sync-alt me-2 text-info"),
                                    "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                                ]),
                                html.Li([
                                    html.I(className="fas fa-crosshairs me-2 text-success"),
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–º–µ—Ç–∫—É –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                                ]),
                                html.Li([
                                    html.I(className="fas fa-exclamation-triangle me-2 text-warning"),
                                    "–ü–æ–ª—è —Å —Ñ–ª–∞–≥–æ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                                ])
                            ])
                        ])
                    ], className="shadow-sm")
                ], width=6)
            ])
        ])
    
    def create_modals(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        """
        return html.Div([
            dbc.Modal([
                dbc.ModalHeader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR"),
                dbc.ModalBody(id="detailed-results-body"),
                dbc.ModalFooter([
                    dbc.Button("–ó–∞–∫—Ä—ã—Ç—å", id="close-details-modal", color="secondary")
                ])
            ], id="details-modal", size="lg"),
            
            dbc.Modal([
                dbc.ModalHeader("‚ùå –û—à–∏–±–∫–∞"),
                dbc.ModalBody(id="error-modal-body"),
                dbc.ModalFooter([
                    dbc.Button("–ó–∞–∫—Ä—ã—Ç—å", id="close-error-modal", color="secondary")
                ])
            ], id="error-modal")
        ])
    
    def setup_callbacks(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö callbacks –¥–ª—è Dash 3.0+
        """
        
        @self.app.callback(
            [Output('pdf-pages-store', 'data'),
             Output('pdf-preview-panel', 'children'),
             Output('run-ocr-btn', 'disabled'),
             Output('status-panel', 'children')],
            [Input('upload-document', 'contents')],
            [State('upload-document', 'filename')]
        )
        def handle_file_upload(contents, filename):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF —Ñ–∞–π–ª–∞"""
            if not contents:
                return None, None, True, None
            
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
                content_type, content_string = contents.split(',')
                decoded = base64.b64decode(content_string)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                images = self.image_processor.convert_pdf_from_bytes(decoded)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
                pages_data = []
                
                for page_num, img in enumerate(images):
                    buffer = io.BytesIO()
                    img.save(buffer, format='PNG')
                    img_b64 = base64.b64encode(buffer.getvalue()).decode()
                    pages_data.append(img_b64)
                
                preview_panel = dbc.Alert([
                    html.I(className="fas fa-file-pdf me-2"),
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename} ({len(pages_data)} —Å—Ç—Ä.)"
                ], color="info")
                
                status_panel = dbc.Alert([
                    html.I(className="fas fa-check-circle me-2"),
                    f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages_data)}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ OCR."
                ], color="success", className="mb-0")
                
                logger.info(f"PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}, —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages_data)}")
                return pages_data, preview_panel, False, status_panel
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {e}")
                error_panel = dbc.Alert([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                ], color="danger", className="mb-0")
                
                return None, None, True, error_panel
        
        @self.app.callback(
            [Output('ocr-results-panel', 'children'),
             Output('ocr-results-store', 'data')],
            [Input('run-ocr-btn', 'n_clicks')],
            [State('pdf-pages-store', 'data'),
             State('config-selector', 'value'),
             State('rotation-selector', 'value')]
        )
        def run_ocr_processing(n_clicks, pages_data, config_key, rotation):
            """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OCR –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥"""
            if not n_clicks or not pages_data or not config_key:
                raise PreventUpdate
            
            try:
                result_panel = dbc.Alert([
                    html.I(className="fas fa-cogs me-2"),
                    f"OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(pages_data)} —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π {config_key}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
                ], color="info")
                
                return result_panel, {"status": "processing", "pages": len(pages_data)}
                
            except Exception as e:
                error_panel = dbc.Alert([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"–û—à–∏–±–∫–∞ OCR: {str(e)}"
                ], color="danger")
                
                return error_panel, None
    
    def setup_clientside_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö callbacks"""
        pass
    
    def run_server(self, debug: bool = True, host: str = '127.0.0.1', port: int = 8050):
        """
        –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å Dash 3.0+ API
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ OCR Dashboard –Ω–∞ http://{host}:{port}")
        logger.info("üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
        logger.info("   ‚Ä¢ 1–¢ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∏–ø–ª–æ–º—ã")
        logger.info("   ‚Ä¢ –†–û–°–ù–û–£ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∏–ø–ª–æ–º—ã") 
        logger.info("   ‚Ä¢ –§–∏–Ω—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (2 –≤–∞—Ä–∏–∞–Ω—Ç–∞)")
        logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π' –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # Dash 3.0+: –∏—Å–ø–æ–ª—å–∑—É–µ–º app.run –≤–º–µ—Å—Ç–æ app.run_server
        try:
            self.app.run(debug=debug, host=host, port=port)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            # Fallback –Ω–∞ Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            logger.info("–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø—É—Å–∫–∞...")
            self.app.server.run(debug=debug, host=host, port=port)


def create_dash_app(tesseract_cmd: Optional[str] = None) -> dash.Dash:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    """
    dashboard = OCRDashboard(tesseract_cmd)
    return dashboard.app


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    dashboard = OCRDashboard()
    dashboard.run_server(debug=True)
