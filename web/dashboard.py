"""
–û—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –±–∞–∑–µ Dash
"""

import dash
from dash import dcc, html, Input, Output, State, callback_context, clientside_callback
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import plotly.graph_objects as go
import plotly.express as px

import fitz  # PyMuPDF
from PIL import Image
import pandas as pd
import numpy as np
import io
import base64
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
import logging

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.ocr_engine import DocumentProcessor
from core.image_processor import AdvancedImageProcessor, ImageAnalyzer, RegionProcessor
from core.config import get_available_configs, get_config, get_field_description, UncertaintyEngine
from core.parsers import ParserRegistry
from web.markup_tool import MarkupTool, setup_markup_callbacks, MarkupIntegration

logger = logging.getLogger(__name__)


class OCRDashboard:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    """
    
    def __init__(self, tesseract_cmd: Optional[str] = None):
        """
        Args:
            tesseract_cmd: –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Tesseract
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.doc_processor = DocumentProcessor(tesseract_cmd)
        self.image_processor = AdvancedImageProcessor()
        self.image_analyzer = ImageAnalyzer()
        self.region_processor = RegionProcessor()
        self.markup_tool = MarkupTool()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = dash.Dash(
            __name__,
            external_stylesheets=[
                dbc.themes.BOOTSTRAP, 
                dbc.icons.FONT_AWESOME,
                "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
            ],
            title="üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            suppress_callback_exceptions=True,
            assets_folder=os.path.join(os.path.dirname(__file__), '..', 'static')
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        self.app.layout = self.create_main_layout()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callbacks
        self.setup_callbacks()
        setup_markup_callbacks(self.app, self.markup_tool)
        
        # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ callbacks –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.setup_clientside_callbacks()
    
    def create_main_layout(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        return dbc.Container([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            html.Div([
                html.H1([
                    html.I(className="fas fa-search me-3"),
                    "OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                ], className="mb-2"),
                html.P(
                    "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ–ª–µ–π",
                    className="lead mb-0"
                )
            ], className="main-header mb-4"),
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã —Å –∏–∫–æ–Ω–∫–∞–º–∏
            dbc.Tabs([
                dbc.Tab(
                    label=[html.I(className="fas fa-file-pdf me-2"), "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"],
                    tab_id="ocr-tab",
                    children=self.create_ocr_tab(),
                    className="fw-bold"
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-crosshairs me-2"), "–†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π"],
                    tab_id="markup-tab", 
                    children=self.markup_tool.create_markup_layout(),
                    className="fw-bold"
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-chart-bar me-2"), "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                    tab_id="analytics-tab",
                    children=self.create_analytics_tab(),
                    className="fw-bold"
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-info-circle me-2"), "–°–ø—Ä–∞–≤–∫–∞"],
                    tab_id="help-tab",
                    children=self.create_help_tab(),
                    className="fw-bold"
                )
            ], id="main-tabs", active_tab="ocr-tab", className="mb-4"),
            
            # –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            self.create_modals(),
            
            # –°–∫—Ä—ã—Ç—ã–µ div –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            dcc.Store(id="pdf-pages-store"),
            dcc.Store(id="ocr-results-store"),
            dcc.Store(id="processing-status-store"),
            dcc.Store(id="image-quality-store"),
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            dcc.Interval(id="progress-interval", interval=1000, disabled=True),
            
        ], fluid=True, className="py-4")
    
    def create_ocr_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è OCR
        """
        return html.Div([
            # –ü–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            dbc.Card([
                dbc.CardHeader([
                    html.I(className="fas fa-cloud-upload-alt me-2"),
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                ], className="fw-bold"),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            dcc.Upload(
                                id='upload-document',
                                children=html.Div([
                                    html.I(className="fas fa-cloud-upload-alt fa-4x mb-3 text-primary"),
                                    html.H5("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞", className="mb-2"),
                                    html.P("–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞", className="text-muted mb-2"),
                                    html.Small("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: PDF –¥–æ 50MB", className="text-muted")
                                ], className="text-center"),
                                style={
                                    'width': '100%', 'height': '180px',
                                    'lineHeight': '60px', 'borderWidth': '3px',
                                    'borderStyle': 'dashed', 'borderRadius': '15px',
                                    'borderColor': '#007bff', 'backgroundColor': '#f8f9fa',
                                    'cursor': 'pointer', 'transition': 'all 0.3s ease'
                                },
                                className="upload-area",
                                multiple=False,
                                accept='.pdf'
                            )
                        ], width=8),
                        
                        dbc.Col([
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                            dbc.Card([
                                dbc.CardHeader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏", className="py-2"),
                                dbc.CardBody([
                                    html.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", className="fw-bold mb-2"),
                                    dcc.Dropdown(
                                        id='config-selector',
                                        options=[
                                            {'label': 'üè¢ 1–¢ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': '1T_CERTIFICATE'},
                                            {'label': 'üè¢ 1–¢ - –î–∏–ø–ª–æ–º', 'value': '1T_DIPLOMA'},
                                            {'label': 'üèõÔ∏è –†–û–°–ù–û–£ - –î–∏–ø–ª–æ–º', 'value': 'ROSNOU_DIPLOMA'},
                                            {'label': 'üèõÔ∏è –†–û–°–ù–û–£ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': 'ROSNOU_CERTIFICATE'},
                                            {'label': 'üè¶ –§–∏–Ω–£–Ω–∏–≤ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ v1', 'value': 'FINUNIV_CERT_V1'},
                                            {'label': 'üè¶ –§–∏–Ω–£–Ω–∏–≤ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ v2', 'value': 'FINUNIV_CERT_V2'}
                                        ],
                                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                                        className="mb-3"
                                    ),
                                    
                                    html.Label("–ü–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", className="fw-bold mb-2"),
                                    dcc.Dropdown(
                                        id='rotation-selector',
                                        options=[
                                            {'label': '‚ÜïÔ∏è –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞', 'value': 0},
                                            {'label': '‚Üª 90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π', 'value': 90},
                                            {'label': '‚Ü∂ 180¬∞', 'value': 180},
                                            {'label': '‚Ü∫ 270¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π', 'value': 270}
                                        ],
                                        value=0,
                                        className="mb-3"
                                    ),
                                    
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                    dbc.Accordion([
                                        dbc.AccordionItem([
                                            dbc.Row([
                                                dbc.Col([
                                                    dbc.Checklist(
                                                        id="advanced-options",
                                                        options=[
                                                            {"label": "–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "value": "enhance"},
                                                            {"label": "–£–¥–∞–ª–µ–Ω–∏–µ —à—É–º–∞", "value": "denoise"},
                                                            {"label": "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞–∫–ª–æ–Ω–∞", "value": "deskew"},
                                                            {"label": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", "value": "aggressive"}
                                                        ],
                                                        value=["enhance"],
                                                        inline=False
                                                    )
                                                ])
                                            ])
                                        ], title="üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                                    ], start_collapsed=True, className="mb-3"),
                                    
                                    dbc.Button(
                                        [html.I(className="fas fa-rocket me-2"), "–ó–∞–ø—É—Å—Ç–∏—Ç—å OCR"],
                                        id="run-ocr-btn",
                                        color="primary",
                                        size="lg",
                                        disabled=True,
                                        className="w-100 fw-bold"
                                    )
                                ], className="p-3")
                            ], className="shadow-sm")
                        ], width=4)
                    ])
                ])
            ], className="mb-4 shadow-sm"),
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            html.Div(id="status-panel"),
            
            # –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF
            html.Div(id="pdf-preview-panel", className="mb-4"),
            
            # –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            html.Div(id="quality-analysis-panel", className="mb-4"),
            
            # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
            html.Div(id="ocr-results-panel")
        ])
    
    def create_analytics_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        """
        return html.Div([
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardHeader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
                        dbc.CardBody([
                            html.Div(id="analytics-content", children=[
                                html.P("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", 
                                      className="text-muted text-center py-5")
                            ])
                        ])
                    ])
                ], width=12)
            ])
        ])
    
    def create_help_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        """
        return html.Div([
            dbc.Row([
                dbc.Col([
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-building me-2"),
                            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                        ], className="fw-bold"),
                        dbc.CardBody([
                            # 1–¢
                            html.Div([
                                html.H5([
                                    html.I(className="fas fa-certificate me-2 text-primary"),
                                    "1–¢"
                                ]),
                                dbc.ListGroup([
                                    dbc.ListGroupItem([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                    ]),
                                    dbc.ListGroupItem([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ"
                                    ])
                                ], flush=True)
                            ], className="mb-4"),
                            
                            # –†–û–°–ù–û–£
                            html.Div([
                                html.H5([
                                    html.I(className="fas fa-university me-2 text-info"),
                                    "–†–û–°–ù–û–£ (–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)"
                                ]),
                                dbc.ListGroup([
                                    dbc.ListGroupItem([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                    ]),
                                    dbc.ListGroupItem([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ"
                                    ])
                                ], flush=True)
                            ], className="mb-4"),
                            
                            # –§–∏–Ω—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
                            html.Div([
                                html.H5([
                                    html.I(className="fas fa-landmark me-2 text-warning"),
                                    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
                                ]),
                                dbc.ListGroup([
                                    dbc.ListGroupItem([
                                        html.I(className="fas fa-check-circle me-2 text-success"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 1) - –§–ò–û –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"
                                    ]),
                                    dbc.ListGroupItem([
                                        html.I(className="fas fa-exclamation-triangle me-2 text-warning"),
                                        "–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 2) - –§–ò–û –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫–∞—Ö –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ"
                                    ])
                                ], flush=True)
                            ])
                        ])
                    ], className="shadow-sm")
                ], width=6),
                
                dbc.Col([
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –ø–æ–ª—è
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-list-check me-2"),
                            "–ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –ø–æ–ª—è"
                        ], className="fw-bold"),
                        dbc.CardBody([
                            dbc.ListGroup([
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-user me-2 text-primary"),
                                    html.Strong("–§–ò–û"), " (–≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)"
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-id-card me-2 text-info"),
                                    html.Strong("–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä"), " –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-hashtag me-2 text-success"),
                                    html.Strong("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-calendar me-2 text-warning"),
                                    html.Strong("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"), " (–≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ)"
                                ])
                            ], flush=True)
                        ])
                    ], className="shadow-sm mb-4"),
                    
                    # –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-lightbulb me-2"),
                            "–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
                        ], className="fw-bold"),
                        dbc.CardBody([
                            dbc.ListGroup([
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-file-pdf me-2 text-danger"),
                                    "–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ PDF —Ñ–∞–π–ª—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-cog me-2 text-primary"),
                                    "–í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-sync-alt me-2 text-info"),
                                    "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-crosshairs me-2 text-success"),
                                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–º–µ—Ç–∫—É –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                                ]),
                                dbc.ListGroupItem([
                                    html.I(className="fas fa-exclamation-triangle me-2 text-warning"),
                                    "–ü–æ–ª—è —Å —Ñ–ª–∞–≥–æ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                                ])
                            ], flush=True)
                        ])
                    ], className="shadow-sm")
                ], width=6)
            ]),
            
            # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardHeader([
                            html.I(className="fas fa-keyboard me-2"),
                            "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"
                        ], className="fw-bold"),
                        dbc.CardBody([
                            dbc.Row([
                                dbc.Col([
                                    html.Div([
                                        html.Kbd("Ctrl + Enter", className="me-2"),
                                        "–ó–∞–ø—É—Å–∫ OCR"
                                    ], className="mb-2"),
                                    html.Div([
                                        html.Kbd("Escape", className="me-2"),
                                        "–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞"
                                    ], className="mb-2")
                                ], width=6),
                                dbc.Col([
                                    html.Div([
                                        html.Kbd("Ctrl + S", className="me-2"),
                                        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
                                    ], className="mb-2"),
                                    html.Div([
                                        html.Kbd("F5", className="me-2"),
                                        "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                                    ], className="mb-2")
                                ], width=6)
                            ])
                        ])
                    ], className="shadow-sm")
                ], width=12)
            ], className="mt-4")
        ])
    
    def create_modals(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        """
        return html.Div([
            # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            dbc.Modal([
                dbc.ModalHeader([
                    html.I(className="fas fa-chart-line me-2"),
                    "–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR"
                ]),
                dbc.ModalBody(id="detailed-results-body"),
                dbc.ModalFooter([
                    dbc.Button("–ó–∞–∫—Ä—ã—Ç—å", id="close-details-modal", color="secondary"),
                    dbc.Button("–≠–∫—Å–ø–æ—Ä—Ç", id="export-details-btn", color="primary")
                ])
            ], id="details-modal", size="xl"),
            
            # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            dbc.Modal([
                dbc.ModalHeader([
                    html.I(className="fas fa-cogs me-2"),
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                ]),
                dbc.ModalBody([
                    dbc.Form([
                        dbc.Row([
                            dbc.Col([
                                html.Label("–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", className="fw-bold"),
                                dcc.Slider(
                                    id="quality-slider",
                                    min=1, max=5, step=1, value=3,
                                    marks={i: f"{'‚òÖ' * i}" for i in range(1, 6)}
                                )
                            ], width=6),
                            dbc.Col([
                                html.Label("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:", className="fw-bold"),
                                dbc.Input(
                                    id="max-dimension-input",
                                    type="number",
                                    value=1200,
                                    min=600, max=3000, step=100
                                )
                            ], width=6)
                        ])
                    ])
                ]),
                dbc.ModalFooter([
                    dbc.Button("–û—Ç–º–µ–Ω–∞", id="cancel-settings-modal", color="secondary"),
                    dbc.Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", id="save-settings-modal", color="primary")
                ])
            ], id="settings-modal"),
            
            # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—à–∏–±–∫–∏
            dbc.Modal([
                dbc.ModalHeader([
                    html.I(className="fas fa-exclamation-triangle me-2 text-danger"),
                    "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                ]),
                dbc.ModalBody(id="error-modal-body"),
                dbc.ModalFooter([
                    dbc.Button("–ó–∞–∫—Ä—ã—Ç—å", id="close-error-modal", color="secondary")
                ])
            ], id="error-modal")
        ])
    
    def setup_callbacks(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö callbacks
        """
        
        @self.app.callback(
            [Output('pdf-pages-store', 'data'),
             Output('pdf-preview-panel', 'children'),
             Output('run-ocr-btn', 'disabled'),
             Output('status-panel', 'children'),
             Output('image-quality-store', 'data')],
            [Input('upload-document', 'contents')],
            [State('upload-document', 'filename')]
        )
        def handle_file_upload(contents, filename):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF —Ñ–∞–π–ª–∞"""
            if not contents:
                return None, None, True, None, None
            
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
                content_type, content_string = contents.split(',')
                decoded = base64.b64decode(content_string)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                images = self.image_processor.convert_pdf_from_bytes(decoded)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                quality_analysis = self.image_analyzer.analyze_image_quality(images[0]) if images else {}
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
                pages_data = []
                preview_images = []
                
                for page_num, img in enumerate(images):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    buffer = io.BytesIO()
                    img.save(buffer, format='PNG')
                    img_b64 = base64.b64encode(buffer.getvalue()).decode()
                    pages_data.append(img_b64)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–∞–Ω–∏—Ü
                    if page_num < 3:
                        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
                        thumbnail = img.copy()
                        thumbnail.thumbnail((200, 300), Image.LANCZOS)
                        thumb_buffer = io.BytesIO()
                        thumbnail.save(thumb_buffer, format='PNG')
                        thumb_b64 = base64.b64encode(thumb_buffer.getvalue()).decode()
                        
                        preview_images.append(
                            dbc.Col([
                                dbc.Card([
                                    dbc.CardImg(
                                        src=f"data:image/png;base64,{thumb_b64}",
                                        top=True,
                                        style={'height': '200px', 'object-fit': 'contain'}
                                    ),
                                    dbc.CardBody([
                                        html.H6(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}", className="text-center mb-1"),
                                        html.Small(f"{img.width}√ó{img.height} px", 
                                                 className="text-muted text-center d-block")
                                    ], className="py-2")
                                ], className="shadow-sm")
                            ], width=4, className="mb-3")
                        )
                
                # –ü–∞–Ω–µ–ª—å –ø—Ä–µ–≤—å—é
                preview_panel = dbc.Card([
                    dbc.CardHeader([
                        html.I(className="fas fa-file-pdf me-2"),
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename} ({len(pages_data)} —Å—Ç—Ä.)"
                    ], className="fw-bold"),
                    dbc.CardBody([
                        dbc.Row(preview_images) if preview_images else 
                        html.P("–ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", className="text-muted text-center")
                    ])
                ], className="shadow-sm")
                
                # –°—Ç–∞—Ç—É—Å –ø–∞–Ω–µ–ª—å
                status_panel = dbc.Alert([
                    html.I(className="fas fa-check-circle me-2"),
                    f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages_data)}. ",
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ OCR."
                ], color="success", className="mb-0")
                
                logger.info(f"PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}, —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages_data)}")
                return pages_data, preview_panel, False, status_panel, quality_analysis
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF: {e}")
                error_panel = dbc.Alert([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
                ], color="danger", className="mb-0")
                
                return None, None, True, error_panel, None
        
        @self.app.callback(
            Output('quality-analysis-panel', 'children'),
            [Input('image-quality-store', 'data')]
        )
        def update_quality_analysis(quality_data):
            """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
            if not quality_data:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
            quality_score = quality_data.get('quality_score', 0)
            suggestions = self.image_analyzer.suggest_improvements(quality_data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            if quality_score >= 0.8:
                color = "success"
                icon = "fas fa-check-circle"
            elif quality_score >= 0.6:
                color = "warning"
                icon = "fas fa-exclamation-triangle"
            else:
                color = "danger"
                icon = "fas fa-times-circle"
            
            return dbc.Card([
                dbc.CardHeader([
                    html.I(className="fas fa-chart-pie me-2"),
                    "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                ], className="fw-bold"),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            dbc.Alert([
                                html.I(className=f"{icon} me-2"),
                                f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.1%}"
                            ], color=color, className="mb-3"),
                            
                            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                            html.H6("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", className="mb-2"),
                            dbc.ListGroup([
                                dbc.ListGroupItem([
                                    html.Strong("–†–∞–∑–º–µ—Ä: "),
                                    f"{quality_data.get('width', 0)}√ó{quality_data.get('height', 0)} –ø–∏–∫—Å–µ–ª–µ–π"
                                ]),
                                dbc.ListGroupItem([
                                    html.Strong("–†–µ–∑–∫–æ—Å—Ç—å: "),
                                    f"{quality_data.get('sharpness', 0):.1f}"
                                ]),
                                dbc.ListGroupItem([
                                    html.Strong("–ö–æ–Ω—Ç—Ä–∞—Å—Ç: "),
                                    f"{quality_data.get('contrast', 0):.1f}"
                                ]),
                                dbc.ListGroupItem([
                                    html.Strong("–Ø—Ä–∫–æ—Å—Ç—å: "),
                                    f"{quality_data.get('brightness', 0):.1f}"
                                ])
                            ], flush=True)
                        ], width=6),
                        
                        dbc.Col([
                            html.H6("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:", className="mb-2"),
                            html.Div([
                                dbc.Alert([
                                    html.I(className="fas fa-lightbulb me-2"),
                                    suggestion
                                ], color="info", className="py-2 px-3 mb-2")
                                for suggestion in suggestions
                            ] if suggestions else [
                                dbc.Alert([
                                    html.I(className="fas fa-thumbs-up me-2"),
                                    "–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–æ—Ä–æ—à–µ–µ! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
                                ], color="success", className="py-2 px-3")
                            ])
                        ], width=6)
                    ])
                ])
            ], className="shadow-sm mb-4")
        
        @self.app.callback(
            [Output('ocr-results-panel', 'children'),
             Output('ocr-results-store', 'data'),
             Output('processing-status-store', 'data')],
            [Input('run-ocr-btn', 'n_clicks')],
            [State('pdf-pages-store', 'data'),
             State('config-selector', 'value'),
             State('rotation-selector', 'value'),
             State('advanced-options', 'value')]
        )
        def run_ocr_processing(n_clicks, pages_data, config_key, rotation, advanced_options):
            """–ó–∞–ø—É—Å–∫ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
            if not n_clicks or not pages_data or not config_key:
                raise PreventUpdate
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = get_config(config_key)
                
                # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                uncertainty_engine = UncertaintyEngine(config.organization)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_options = {
                    'enhance': 'enhance' in (advanced_options or []),
                    'denoise': 'denoise' in (advanced_options or []),
                    'deskew': 'deskew' in (advanced_options or []),
                    'aggressive': 'aggressive' in (advanced_options or [])
                }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                all_results = []
                result_panels = []
                
                for page_num, page_b64 in enumerate(pages_data):
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_data = base64.b64decode(page_b64)
                    img = Image.open(io.BytesIO(img_data))
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç
                    if rotation:
                        img = self.image_processor.rotate_image(img, rotation)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    if processing_options['enhance']:
                        img = self.image_processor.enhance_image_advanced(img)
                    
                    if processing_options['denoise']:
                        img = self.image_processor.denoise_image(img, method='bilateral')
                    
                    if processing_options['deskew']:
                        img = self.image_processor.skew_correction(img)
                    
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
                    img = self.image_processor.resize_image(img)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
                    result = self.doc_processor.extract_fields(
                        img, config.__dict__, uncertainty_engine
                    )
                    result['page'] = page_num + 1
                    result['processing_options'] = processing_options
                    all_results.append(result)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_panel = self.create_enhanced_page_result_panel(
                        result, page_num + 1, img, config.__dict__
                    )
                    result_panels.append(page_panel)
                
                # –û–±—â–∞—è –ø–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                summary_panel = self.create_enhanced_summary_panel(all_results, config)
                
                final_panel = html.Div([
                    summary_panel,
                    html.Hr(className="my-4"),
                    html.Div(result_panels, className="ocr-result")
                ])
                
                logger.info(f"OCR –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(all_results)} —Å—Ç—Ä–∞–Ω–∏—Ü")
                return final_panel, all_results, {'status': 'completed', 'pages': len(all_results)}
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
                error_panel = dbc.Alert([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                ], color="danger")
                
                return error_panel, None, {'status': 'error', 'message': str(e)}
        
        @self.app.callback(
            Output('analytics-content', 'children'),
            [Input('ocr-results-store', 'data')]
        )
        def update_analytics(ocr_results):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR"""
            if not ocr_results:
                return html.P("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", className="text-muted text-center py-5")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            df = pd.DataFrame(ocr_results)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_pages = len(df)
            total_uncertainties = sum(len(r.get('uncertainties', [])) for r in ocr_results)
            success_rate = (total_pages - len([r for r in ocr_results if r.get('uncertainties')])) / total_pages * 100
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            uncertainty_fig = px.bar(
                x=[f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}" for i in range(total_pages)],
                y=[len(r.get('uncertainties', [])) for r in ocr_results],
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º",
                labels={'x': '–°—Ç—Ä–∞–Ω–∏—Ü–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π'}
            )
            uncertainty_fig.update_layout(showlegend=False)
            
            return html.Div([
                # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                dbc.Row([
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.H2(f"{total_pages}", className="stat-number text-primary"),
                                html.P("–°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", className="stat-label")
                            ])
                        ], className="text-center stat-card")
                    ], width=3),
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.H2(f"{success_rate:.1f}%", className="stat-number text-success"),
                                html.P("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", className="stat-label")
                            ])
                        ], className="text-center stat-card")
                    ], width=3),
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.H2(f"{total_uncertainties}", className="stat-number text-warning"),
                                html.P("–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", className="stat-label")
                            ])
                        ], className="text-center stat-card")
                    ], width=3),
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.H2(f"{total_uncertainties/total_pages:.1f}", className="stat-number text-info"),
                                html.P("–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É", className="stat-label")
                            ])
                        ], className="text-center stat-card")
                    ], width=3)
                ], className="stats-grid mb-4"),
                
                # –ì—Ä–∞—Ñ–∏–∫ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π
                dbc.Card([
                    dbc.CardHeader("–ì—Ä–∞—Ñ–∏–∫ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"),
                    dbc.CardBody([
                        dcc.Graph(figure=uncertainty_fig)
                    ])
                ])
            ])
    
    def create_enhanced_page_result_panel(self, result: Dict, page_num: int, 
                                        img: Image.Image, config: Dict) -> dbc.Card:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏
        marked_img = self.doc_processor.display_image_with_boxes(
            img, config.get('fields', [])
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        buffer = io.BytesIO()
        marked_img.save(buffer, format='PNG')
        img_b64 = base64.b64encode(buffer.getvalue()).decode()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_items = []
        uncertainties = result.get('uncertainties', [])
        
        for field_config in config.get('fields', []):
            field_name = field_config['name']
            field_value = result.get(field_name, 'NOT_EXTRACTED')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            is_uncertain = any(u['field'] == field_name for u in uncertainties)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞
            if field_name == 'seriesandnumber':
                series = result.get('series', '')
                number = result.get('number', '')
                field_value = f"{series} {number}" if series and number else 'NOT_EXTRACTED'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Å—Ç—Ä–æ–∫–∏
            if is_uncertain:
                row_class = "table-warning"
                icon = html.I(className="fas fa-exclamation-triangle text-warning me-2")
            elif field_value == 'NOT_EXTRACTED':
                row_class = "table-danger"
                icon = html.I(className="fas fa-times-circle text-danger me-2")
            else:
                row_class = "table-success"
                icon = html.I(className="fas fa-check-circle text-success me-2")
            
            result_items.append(
                html.Tr([
                    html.Td([
                        icon,
                        html.Strong(get_field_description(field_name))
                    ]),
                    html.Td([
                        html.Code(str(field_value), className="bg-light px-2 py-1 rounded"),
                        dbc.Button(
                            html.I(className="fas fa-copy"),
                            id={'type': 'copy-btn', 'index': f"{page_num}_{field_name}"},
                            color="outline-secondary",
                            size="sm",
                            className="ms-2"
                        ) if field_value != 'NOT_EXTRACTED' else ""
                    ])
                ], className=row_class)
            )
        
        return dbc.Card([
            dbc.CardHeader([
                html.I(className="fas fa-file-alt me-2"),
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}",
                dbc.Badge(
                    f"{len(uncertainties)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π" if uncertainties else "–û–ö",
                    color="warning" if uncertainties else "success",
                    className="ms-auto"
                )
            ], className="d-flex align-items-center fw-bold"),
            dbc.CardBody([
                dbc.Row([
                    dbc.Col([
                        html.H6("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", className="mb-3"),
                        dbc.Table([
                            html.Thead([
                                html.Tr([
                                    html.Th("–ü–æ–ª–µ", width="40%"),
                                    html.Th("–ó–Ω–∞—á–µ–Ω–∏–µ", width="60%")
                                ])
                            ]),
                            html.Tbody(result_items)
                        ], striped=True, bordered=True, hover=True, size="sm", className="mb-3"),
                        
                        dbc.ButtonGroup([
                            dbc.Button(
                                [html.I(className="fas fa-chart-line me-2"), "–î–µ—Ç–∞–ª–∏"],
                                id={'type': 'show-details-btn', 'index': page_num},
                                color="info",
                                size="sm"
                            ),
                            dbc.Button(
                                [html.I(className="fas fa-download me-2"), "JSON"],
                                id={'type': 'export-json-btn', 'index': page_num},
                                color="success",
                                size="sm"
                            )
                        ])
                    ], width=6),
                    
                    dbc.Col([
                        html.H6("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π:", className="mb-3"),
                        html.Img(
                            src=f"data:image/png;base64,{img_b64}",
                            style={'width': '100%', 'max-height': '500px', 'object-fit': 'contain'},
                            className="border rounded shadow-sm"
                        )
                    ], width=6)
                ])
            ])
        ], className="result-card mb-4 shadow-sm")
    
    def create_enhanced_summary_panel(self, all_results: List[Dict], config) -> dbc.Card:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–≤–æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        total_pages = len(all_results)
        total_uncertainties = sum(len(r.get('uncertainties', [])) for r in all_results)
        success_rate = (total_pages - len([r for r in all_results if r.get('uncertainties')])) / total_pages * 100
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        for result in all_results:
            row = {
                '–°—Ç—Ä–∞–Ω–∏—Ü–∞': result.get('page', 1),
                '–§–ò–û': result.get('fullname', ''),
                '–°–µ—Ä–∏—è': result.get('series', ''),
                '–ù–æ–º–µ—Ä': result.get('number', ''),
                '–†–µ–≥.–Ω–æ–º–µ—Ä': result.get('registrationnumber', ''),
                '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏': result.get('issuedate', ''),
                '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏': len(result.get('uncertainties', []))
            }
            export_data.append(row)
        
        df = pd.DataFrame(export_data)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
        csv_b64 = base64.b64encode(csv_buffer.getvalue().encode()).decode()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        json_data = json.dumps(all_results, ensure_ascii=False, indent=2, default=str)
        json_b64 = base64.b64encode(json_data.encode()).decode()
        
        return dbc.Card([
            dbc.CardHeader([
                html.I(className="fas fa-chart-pie me-2"),
                "–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            ], className="fw-bold"),
            dbc.CardBody([
                dbc.Row([
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    dbc.Col([
                        dbc.Alert([
                            html.H4([
                                html.I(className="fas fa-file-alt me-2"),
                                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"
                            ], className="mb-3"),
                            html.P([
                                html.Strong("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: "), config.name
                            ], className="mb-2"),
                            html.P([
                                html.Strong("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: "), config.organization
                            ], className="mb-2"),
                            html.P([
                                html.Strong("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: "), f"{success_rate:.1f}%"
                            ], className="mb-2"),
                            html.P([
                                html.Strong("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: "), 
                                html.Span(f"{total_uncertainties}", 
                                         className="text-warning fw-bold" if total_uncertainties > 0 else "text-success fw-bold")
                            ], className="mb-0")
                        ], color="info")
                    ], width=6),
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç
                    dbc.Col([
                        html.H6([
                            html.I(className="fas fa-download me-2"),
                            "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
                        ], className="mb-3"),
                        
                        dbc.ButtonGroup([
                            html.A(
                                dbc.Button(
                                    [html.I(className="fas fa-file-csv me-2"), "CSV"],
                                    color="success",
                                    size="sm"
                                ),
                                href=f"data:text/csv;charset=utf-8;base64,{csv_b64}",
                                download=f"ocr_results_{timestamp}.csv",
                                className="text-decoration-none"
                            ),
                            html.A(
                                dbc.Button(
                                    [html.I(className="fas fa-file-code me-2"), "JSON"],
                                    color="info",
                                    size="sm"
                                ),
                                href=f"data:application/json;charset=utf-8;base64,{json_b64}",
                                download=f"ocr_results_{timestamp}.json",
                                className="text-decoration-none"
                            ),
                            dbc.Button(
                                [html.I(className="fas fa-print me-2"), "–ü–µ—á–∞—Ç—å"],
                                id="print-results-btn",
                                color="secondary",
                                size="sm"
                            )
                        ], className="export-buttons mb-3"),
                        
                        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        dbc.ListGroup([
                            dbc.ListGroupItem([
                                html.I(className="fas fa-clock me-2"),
                                f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%H:%M:%S')}"
                            ]),
                            dbc.ListGroupItem([
                                html.I(className="fas fa-memory me-2"),
                                f"–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_uncertainties/total_pages:.1f}"
                            ])
                        ], flush=True)
                    ], width=6)
                ])
            ])
        ], className="summary-panel mb-4 shadow-sm")
    
    def setup_clientside_callbacks(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö callbacks –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage
        clientside_callback(
            """
            function(config_value, rotation_value) {
                if (config_value) localStorage.setItem('ocr_config', config_value);
                if (rotation_value !== null) localStorage.setItem('ocr_rotation', rotation_value);
                return window.dash_clientside.no_update;
            }
            """,
            Output('config-selector', 'style'),
            [Input('config-selector', 'value'),
             Input('rotation-selector', 'value')]
        )
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        clientside_callback(
            """
            function(n_clicks_list) {
                if (!n_clicks_list || n_clicks_list.every(x => !x)) {
                    return window.dash_clientside.no_update;
                }
                
                // –ù–∞–π–¥–µ–º –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
                const ctx = window.dash_clientside.callback_context;
                if (!ctx.triggered.length) return window.dash_clientside.no_update;
                
                const button_id = JSON.parse(ctx.triggered[0]['prop_id'].split('.')[0]);
                const field_value = document.querySelector(`tr:has(button[id*="${button_id.index}"]) code`);
                
                if (field_value && navigator.clipboard) {
                    navigator.clipboard.writeText(field_value.textContent);
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    console.log('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
                }
                
                return window.dash_clientside.no_update;
            }
            """,
            Output('status-panel', 'style'),
            [Input({'type': 'copy-btn', 'index': dash.dependencies.ALL}, 'n_clicks')]
        )
    
    def run_server(self, debug: bool = True, host: str = '127.0.0.1', port: int = 8050):
        """
        –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ OCR Dashboard –Ω–∞ http://{host}:{port}")
        logger.info("üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
        logger.info("   ‚Ä¢ 1–¢ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∏–ø–ª–æ–º—ã")
        logger.info("   ‚Ä¢ –†–û–°–ù–û–£ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∏–ø–ª–æ–º—ã") 
        logger.info("   ‚Ä¢ –§–∏–Ω—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (2 –≤–∞—Ä–∏–∞–Ω—Ç–∞)")
        logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–†–∞–∑–º–µ—Ç–∫–∞ –ø–æ–ª–µ–π' –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        self.app.run_server(debug=debug, host=host, port=port)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
def create_dash_app(tesseract_cmd: Optional[str] = None) -> dash.Dash:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    """
    dashboard = OCRDashboard(tesseract_cmd)
    return dashboard.app


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    dashboard = OCRDashboard()
    dashboard.run_server(debug=True)
