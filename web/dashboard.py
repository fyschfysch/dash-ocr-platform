"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è OCR Dashboard –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""

import dash
from dash import dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import logging

logger = logging.getLogger(__name__)


class OCRDashboard:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è OCR Dashboard
    """
    
    def __init__(self, tesseract_cmd=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = dash.Dash(
            __name__,
            external_stylesheets=[
                dbc.themes.BOOTSTRAP,
                dbc.icons.FONT_AWESOME
            ],
            title="OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        )
        
        # –ü—Ä–æ—Å—Ç–æ–π layout
        self.app.layout = self.create_layout()
        
        # –ë–∞–∑–æ–≤—ã–µ callbacks
        self.setup_callbacks()
    
    def create_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ layout"""
        return dbc.Container([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            dbc.Alert([
                html.H1([
                    html.I(className="fas fa-search me-3"),
                    "OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                ]),
                html.P("–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", className="mb-0")
            ], color="primary", className="mb-4"),
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
            dbc.Card([
                dbc.CardHeader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            # –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                            dcc.Upload(
                                id='upload-document',
                                children=dbc.Alert([
                                    html.I(className="fas fa-cloud-upload-alt fa-3x mb-3"),
                                    html.Br(),
                                    "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
                                ], color="light", className="text-center"),
                                style={
                                    'width': '100%',
                                    'borderWidth': '2px',
                                    'borderStyle': 'dashed',
                                    'borderRadius': '10px',
                                    'borderColor': '#007bff',
                                    'cursor': 'pointer'
                                },
                                multiple=False,
                                accept='.pdf'
                            )
                        ], width=8),
                        
                        dbc.Col([
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                            html.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", className="fw-bold"),
                            dcc.Dropdown(
                                id='config-selector',
                                options=[
                                    {'label': '1–¢ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': '1T_CERTIFICATE'},
                                    {'label': '1–¢ - –î–∏–ø–ª–æ–º', 'value': '1T_DIPLOMA'},
                                    {'label': '–†–û–°–ù–û–£ - –î–∏–ø–ª–æ–º', 'value': 'ROSNOU_DIPLOMA'}
                                ],
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                                className="mb-3"
                            ),
                            
                            dbc.Button(
                                "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å OCR",
                                id="run-ocr-btn",
                                color="primary",
                                size="lg",
                                disabled=True,
                                className="w-100"
                            )
                        ], width=4)
                    ])
                ])
            ], className="mb-4"),
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
            html.Div(id="status-panel"),
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            html.Div(id="results-panel")
            
        ], fluid=True, className="py-4")
    
    def setup_callbacks(self):
        """–ë–∞–∑–æ–≤—ã–µ callbacks"""
        
        @self.app.callback(
            [Output('run-ocr-btn', 'disabled'),
             Output('status-panel', 'children')],
            [Input('upload-document', 'contents')],
            [State('upload-document', 'filename')]
        )
        def handle_upload(contents, filename):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
            if not contents:
                return True, ""
            
            status = dbc.Alert([
                html.I(className="fas fa-check-circle me-2"),
                f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}"
            ], color="success")
            
            return False, status
        
        @self.app.callback(
            Output('results-panel', 'children'),
            [Input('run-ocr-btn', 'n_clicks')],
            [State('config-selector', 'value')]
        )
        def run_ocr(n_clicks, config):
            """–ò–º–∏—Ç–∞—Ü–∏—è OCR"""
            if not n_clicks or not config:
                raise PreventUpdate
            
            return dbc.Alert([
                html.I(className="fas fa-cogs me-2"),
                f"OCR –∑–∞–ø—É—â–µ–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {config}"
            ], color="info")
    
    def run_server(self, debug=True, host='127.0.0.1', port=8050):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ http://{host}:{port}")
        try:
            self.app.run(debug=debug, host=host, port=port)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.app.server.run(debug=debug, host=host, port=port)


if __name__ == '__main__':
    dashboard = OCRDashboard()
    dashboard.run_server(debug=True)
