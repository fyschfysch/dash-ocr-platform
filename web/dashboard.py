"""
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Dash Dashboard –¥–ª—è OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–° —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏, –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
"""

import dash
from dash import dcc, html, Input, Output, State, ALL, MATCH, callback_context
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate

from PIL import Image
import pandas as pd
import io
import base64
import os
import json
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
import logging

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.ocr_engine import DocumentProcessor
from core.image_processor import AdvancedImageProcessor, ImageAnalyzer, RegionProcessor
from core.config import get_config, get_available_configs, UncertaintyEngine, get_field_description

logger = logging.getLogger(__name__)


class OCRDashboard:
    """
    –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Dashboard –¥–ª—è OCR —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏
    """
    
    def __init__(self, tesseract_cmd: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard
        
        Args:
            tesseract_cmd: –ü—É—Ç—å –∫ Tesseract
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        self.doc_processor = DocumentProcessor(tesseract_cmd)
        self.image_processor = AdvancedImageProcessor()
        self.image_analyzer = ImageAnalyzer()
        self.region_processor = RegionProcessor()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = dash.Dash(
            __name__,
            external_stylesheets=[
                dbc.themes.BOOTSTRAP,
                dbc.icons.FONT_AWESOME,
                "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
            ],
            title="OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            suppress_callback_exceptions=True
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        self.app.layout = self.create_main_layout()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callbacks
        self.setup_callbacks()
        
        logger.info("OCRDashboard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_main_layout(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ layout –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        return dbc.Container([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            dbc.Alert([
                html.H1([
                    html.I(className="fas fa-search me-3"),
                    "OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                ], className="mb-2"),
                html.P(
                    "–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–µ–π",
                    className="mb-0"
                )
            ], color="primary", className="mb-4"),
            
            # –¢–∞–±—ã
            dbc.Tabs([
                dbc.Tab(
                    label=[html.I(className="fas fa-file-pdf me-2"), "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ"],
                    tab_id="ocr-tab",
                    children=self.create_ocr_tab()
                ),
                dbc.Tab(
                    label=[html.I(className="fas fa-info-circle me-2"), "–°–ø—Ä–∞–≤–∫–∞"],
                    tab_id="help-tab",
                    children=self.create_help_tab()
                )
            ], id="main-tabs", active_tab="ocr-tab", className="mb-4"),
            
            # –°–∫—Ä—ã—Ç—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            dcc.Store(id='pdf-data-store'),
            dcc.Store(id='ocr-results-store'),
            dcc.Store(id='field-corrections-store', data={}),
            dcc.Store(id='current-config-store'),
            
        ], fluid=True, className="py-4")
    
    def create_ocr_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ OCR —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
        """
        return html.Div([
            # –ü–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏
            dbc.Card([
                dbc.CardHeader([
                    html.I(className="fas fa-cloud-upload-alt me-2"),
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
                ], className="fw-bold"),
                dbc.CardBody([
                    dbc.Row([
                        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
                        dbc.Col([
                            dcc.Upload(
                                id='upload-document',
                                children=dbc.Alert([
                                    html.I(className="fas fa-cloud-upload-alt fa-3x mb-3 text-primary"),
                                    html.Br(),
                                    html.H5("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞"),
                                    html.P("–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞", className="text-muted mb-1"),
                                    html.Small("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: PDF –¥–æ 50MB")
                                ], color="light", className="text-center py-4 mb-0"),
                                style={
                                    'borderWidth': '2px',
                                    'borderStyle': 'dashed',
                                    'borderRadius': '10px',
                                    'cursor': 'pointer'
                                },
                                multiple=False,
                                accept='.pdf'
                            )
                        ], width=12, className="mb-3"),
                    ]),
                    
                    html.Hr(),
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    dbc.Row([
                        dbc.Col([
                            html.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", className="fw-bold mb-2"),
                            dcc.Dropdown(
                                id='config-selector',
                                options=self._get_config_options(),
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                                className="mb-2"
                            ),
                        ], width=6),
                        
                        dbc.Col([
                            html.Label("–ü–æ–≤–æ—Ä–æ—Ç:", className="fw-bold mb-2"),
                            dcc.Dropdown(
                                id='rotation-selector',
                                options=[
                                    {'label': '0¬∞', 'value': 0},
                                    {'label': '90¬∞', 'value': 90},
                                    {'label': '180¬∞', 'value': 180},
                                    {'label': '270¬∞', 'value': 270}
                                ],
                                value=0,
                                className="mb-2"
                            ),
                        ], width=3),
                        
                        dbc.Col([
                            html.Label(html.Br()),
                            dbc.Button(
                                [html.I(className="fas fa-rocket me-2"), "–ó–∞–ø—É—Å—Ç–∏—Ç—å OCR"],
                                id="run-ocr-btn",
                                color="success",
                                size="lg",
                                disabled=True,
                                className="w-100"
                            )
                        ], width=3)
                    ])
                ])
            ], className="mb-4"),
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
            html.Div(id="status-panel", className="mb-3"),
            
            # –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
            html.Div(id="pdf-preview-panel", className="mb-4"),
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏
            html.Div(id="ocr-results-panel")
        ])
    
    def create_help_tab(self) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        """
        return dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
                    dbc.CardBody([
                        html.H5("1–¢", className="text-primary"),
                        html.Ul([
                            html.Li("–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
                            html.Li("–î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ")
                        ]),
                        
                        html.H5("–†–û–°–ù–û–£", className="text-info mt-3"),
                        html.Ul([
                            html.Li("–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
                            html.Li("–î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ")
                        ]),
                        
                        html.H5("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", className="text-warning mt-3"),
                        html.Ul([
                            html.Li("–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 1) - –§–ò–û –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É"),
                            html.Li("–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 2) - –§–ò–û –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫–∞—Ö")
                        ])
                    ])
                ])
            ], width=6),
            
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader("üîß –ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –ø–æ–ª—è"),
                    dbc.CardBody([
                        html.Ul([
                            html.Li([html.Strong("–§–ò–û"), " (–≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)"]),
                            html.Li([html.Strong("–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä"), " –¥–æ–∫—É–º–µ–Ω—Ç–∞"]),
                            html.Li([html.Strong("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")]),
                            html.Li([html.Strong("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏"), " (ISO —Ñ–æ—Ä–º–∞—Ç)"])
                        ])
                    ])
                ], className="mb-3"),
                
                dbc.Card([
                    dbc.CardHeader("üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
                    dbc.CardBody([
                        html.Ul([
                            html.Li("–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ PDF –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"),
                            html.Li("–í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
                            html.Li("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–≤–æ—Ä–æ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"),
                            html.Li([
                                html.I(className="fas fa-exclamation-triangle text-warning me-2"),
                                "–ü–æ–ª—è —Å –∂–µ–ª—Ç–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                            ])
                        ])
                    ])
                ])
            ], width=6)
        ])
    
    def _get_config_options(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        configs = get_available_configs()
        return [
            {
                'label': f"{conf['organization']} - {conf['name']}",
                'value': conf['id']
            }
            for conf in configs
        ]
    
    def setup_callbacks(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö callbacks
        """
        
        # Callback 1: –ó–∞–≥—Ä—É–∑–∫–∞ PDF
        @self.app.callback(
            [Output('pdf-data-store', 'data'),
             Output('pdf-preview-panel', 'children'),
             Output('run-ocr-btn', 'disabled'),
             Output('status-panel', 'children')],
            [Input('upload-document', 'contents')],
            [State('upload-document', 'filename')]
        )
        def handle_upload(contents, filename):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF —Å –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
            if not contents:
                return None, None, True, ""
            
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                content_type, content_string = contents.split(',')
                decoded = base64.b64decode(content_string)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF
                images = self.image_processor.convert_pdf_from_bytes(decoded)
                
                if not images:
                    error = dbc.Alert("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF", color="danger")
                    return None, None, True, error
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                images_b64 = []
                for img in images:
                    buffer = io.BytesIO()
                    img.save(buffer, format='PNG')
                    img_b64 = base64.b64encode(buffer.getvalue()).decode()
                    images_b64.append(img_b64)
                
                # –ü—Ä–µ–≤—å—é –¢–û–õ–¨–ö–û –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                preview = dbc.Card([
                    dbc.CardHeader(f"üìÑ {filename} - {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü"),
                    dbc.CardBody([
                        html.Div([
                            html.Img(
                                src=f"data:image/png;base64,{images_b64[0]}",
                                style={
                                    'width': '100%',
                                    'height': 'auto',
                                    'object-fit': 'contain',
                                    'max-height': '70vh'
                                },
                                className="border shadow-sm"
                            )
                        ], className="text-center")
                    ])
                ])
                
                status = dbc.Alert([
                    html.I(className="fas fa-check-circle me-2"),
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω: {filename} ({len(images)} —Å—Ç—Ä.). –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞."
                ], color="success")
                
                return images_b64, preview, False, status
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                error = dbc.Alert(f"–û—à–∏–±–∫–∞: {str(e)}", color="danger")
                return None, None, True, error
        
        # Callback 2: –ó–∞–ø—É—Å–∫ OCR
        @self.app.callback(
            [Output('ocr-results-panel', 'children'),
             Output('ocr-results-store', 'data'),
             Output('current-config-store', 'data')],
            [Input('run-ocr-btn', 'n_clicks')],
            [State('pdf-data-store', 'data'),
             State('config-selector', 'value'),
             State('rotation-selector', 'value')]
        )
        def run_ocr_processing(n_clicks, pdf_data, config_id, rotation):
            """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
            if not n_clicks or not pdf_data or not config_id:
                raise PreventUpdate
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = get_config(config_id)
                uncertainty_engine = UncertaintyEngine(config.organization)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                all_results = []
                
                for page_num, img_b64 in enumerate(pdf_data):
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    img_data = base64.b64decode(img_b64)
                    img = Image.open(io.BytesIO(img_data))
                    
                    # –ü–æ–≤–æ—Ä–æ—Ç
                    if rotation:
                        img = self.image_processor.rotate_image(img, rotation)
                    
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ
                    img = self.image_processor.resize_image(img)
                    img = self.image_processor.enhance_image_advanced(img)
                    
                    # OCR —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
                    result = self.doc_processor.extract_fields(img, config, uncertainty_engine)
                    result['page'] = page_num + 1
                    result['image_b64'] = img_b64
                    
                    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—ã –ø–æ–ª–µ–π
                    result['field_thumbnails'] = {}
                    for field_config in config.fields:
                        field_name = field_config['name']
                        box = field_config.get('box')
                        
                        if box:
                            thumbnail = self.doc_processor.crop_field_thumbnail(img, box)
                            thumb_buffer = io.BytesIO()
                            thumbnail.save(thumb_buffer, format='PNG')
                            thumb_b64 = base64.b64encode(thumb_buffer.getvalue()).decode()
                            result['field_thumbnails'][field_name] = thumb_b64
                    
                    all_results.append(result)
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results_ui = self.create_results_interface(all_results, config)
                
                return results_ui, all_results, config_id
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
                error = dbc.Alert(f"–û—à–∏–±–∫–∞ OCR: {str(e)}", color="danger")
                return error, None, None
        
        # Callback 3: –ü—Ä–∏–Ω—è—Ç–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        @self.app.callback(
            [Output('ocr-results-store', 'data', allow_duplicate=True),
             Output({'type': 'field-status', 'page': MATCH, 'field': MATCH}, 'children')],
            [Input({'type': 'accept-btn', 'page': MATCH, 'field': MATCH}, 'n_clicks')],
            [State({'type': 'field-input', 'page': MATCH, 'field': MATCH}, 'value'),
             State({'type': 'field-input', 'page': MATCH, 'field': MATCH}, 'id'),
             State('ocr-results-store', 'data')],
            prevent_initial_call=True
        )
        def accept_correction(n_clicks, new_value, field_id, results_data):
            """–ü—Ä–∏–Ω—è—Ç–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è"""
            if not n_clicks or new_value is None or not results_data:
                raise PreventUpdate
            
            page_num = field_id['page']
            field_name = field_id['field']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            page_idx = page_num - 1
            if page_idx < len(results_data):
                results_data[page_idx][field_name] = new_value
                
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã—Ö
                uncertainties = results_data[page_idx].get('uncertainties', [])
                results_data[page_idx]['uncertainties'] = [
                    u for u in uncertainties if u['field'] != field_name
                ]
                
                logger.info(f"–ü—Ä–∏–Ω—è—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}, –ø–æ–ª–µ {field_name}")
            
            status = html.Span([
                html.I(className="fas fa-check-circle text-success me-1"),
                "–ü—Ä–∏–Ω—è—Ç–æ"
            ])
            
            return results_data, status
        
        # Callback 4: –≠–∫—Å–ø–æ—Ä—Ç CSV
        @self.app.callback(
            Output('download-csv', 'data'),
            [Input('export-csv-btn', 'n_clicks')],
            [State('ocr-results-store', 'data')],
            prevent_initial_call=True
        )
        def export_csv(n_clicks, results_data):
            """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
            if not n_clicks or not results_data:
                raise PreventUpdate
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            export_data = []
            for result in results_data:
                row = {
                    '–°—Ç—Ä–∞–Ω–∏—Ü–∞': result.get('page', 1),
                    '–§–ò–û': result.get('fullname', ''),
                    '–°–µ—Ä–∏—è': result.get('series', ''),
                    '–ù–æ–º–µ—Ä': result.get('number', ''),
                    '–†–µ–≥.–Ω–æ–º–µ—Ä': result.get('registrationnumber', ''),
                    '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏': result.get('issuedate', ''),
                    '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏': len(result.get('uncertainties', []))
                }
                export_data.append(row)
            
            df = pd.DataFrame(export_data)
            
            return dcc.send_data_frame(
                df.to_csv,
                f"ocr_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                index=False
            )
    
    def create_results_interface(self, results: List[Dict], config) -> html.Div:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏
        """
        components = [
            self.create_summary_panel(results, config),
            html.Hr()
        ]
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Ç–∞–±–ª–∏—Ü—É
        for page_result in results:
            page_table = self.create_editable_page_table(page_result, config)
            components.append(page_table)
        
        return html.Div(components)
    
    def create_editable_page_table(self, page_result: Dict, config) -> dbc.Card:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏
        """
        page_num = page_result['page']
        uncertainties = page_result.get('uncertainties', [])
        uncertain_fields = {u['field'] for u in uncertainties}
        field_thumbnails = page_result.get('field_thumbnails', {})
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        table_rows = []
        
        for field_config in config.fields:
            field_name = field_config['name']
            field_display = get_field_description(field_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
            if field_name == 'seriesandnumber':
                value = f"{page_result.get('series', '')} {page_result.get('number', '')}".strip()
            else:
                value = page_result.get(field_name, '')
            
            # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –ø–æ–ª—è
            thumb_b64 = field_thumbnails.get(field_name, '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å (–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤—ã–¥–µ–ª—è–µ–º)
            is_uncertain = field_name in uncertain_fields
            row_class = "table-warning" if is_uncertain else ""
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
            row = html.Tr([
                # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
                html.Td([
                    html.Strong(field_display),
                    html.I(className="fas fa-exclamation-triangle ms-2 text-warning")
                    if is_uncertain else ""
                ], style={'width': '20%'}),
                
                # –ú–∏–Ω–∏–∞—Ç—é—Ä–∞
                html.Td([
                    html.Img(
                        src=f"data:image/png;base64,{thumb_b64}",
                        style={'max-width': '120px', 'max-height': '80px'},
                        className="border"
                    ) if thumb_b64 else html.Span("‚Äî", className="text-muted")
                ], style={'width': '15%', 'text-align': 'center'}),
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ
                html.Td([
                    dcc.Input(
                        id={'type': 'field-input', 'page': page_num, 'field': field_name},
                        value=str(value),
                        debounce=True,
                        style={
                            'width': '100%',
                            'background-color': '#fff3cd' if is_uncertain else '#fff'
                        }
                    )
                ], style={'width': '45%'}),
                
                # –ö–Ω–æ–ø–∫–∞ –∏ —Å—Ç–∞—Ç—É—Å
                html.Td([
                    dbc.Button(
                        "‚úì –ü—Ä–∏–Ω—è—Ç—å",
                        id={'type': 'accept-btn', 'page': page_num, 'field': field_name},
                        color="success",
                        size="sm",
                        className="me-2"
                    ),
                    html.Span(
                        id={'type': 'field-status', 'page': page_num, 'field': field_name},
                        className="text-muted small"
                    )
                ], style={'width': '20%'})
                
            ], className=row_class)
            
            table_rows.append(row)
        
        return dbc.Card([
            dbc.CardHeader([
                html.I(className="fas fa-edit me-2"),
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π"
            ], className="fw-bold"),
            dbc.CardBody([
                dbc.Table([
                    html.Thead([
                        html.Tr([
                            html.Th("–ü–æ–ª–µ"),
                            html.Th("–ü—Ä–µ–≤—å—é"),
                            html.Th("–ó–Ω–∞—á–µ–Ω–∏–µ"),
                            html.Th("–î–µ–π—Å—Ç–≤–∏–µ")
                        ])
                    ]),
                    html.Tbody(table_rows)
                ], bordered=True, hover=True, striped=True, responsive=True)
            ])
        ], className="mb-4")
    
    def create_summary_panel(self, results: List[Dict], config) -> dbc.Card:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        total_pages = len(results)
        total_uncertainties = sum(len(r.get('uncertainties', [])) for r in results)
        
        # DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        for result in results:
            export_data.append({
                '–°—Ç—Ä–∞–Ω–∏—Ü–∞': result['page'],
                '–§–ò–û': result.get('fullname', ''),
                '–°–µ—Ä–∏—è': result.get('series', ''),
                '–ù–æ–º–µ—Ä': result.get('number', ''),
                '–†–µ–≥.–Ω–æ–º–µ—Ä': result.get('registrationnumber', ''),
                '–î–∞—Ç–∞': result.get('issuedate', '')
            })
        
        df = pd.DataFrame(export_data)
        
        # CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
        csv_b64 = base64.b64encode(csv_buffer.getvalue().encode()).decode()
        
        return dbc.Card([
            dbc.CardHeader("üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
            dbc.CardBody([
                dbc.Row([
                    dbc.Col([
                        html.H5(f"–°—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"),
                        html.P(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.name}"),
                        html.P([
                            html.I(className="fas fa-exclamation-triangle text-warning me-2"),
                            f"–¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {total_uncertainties}"
                        ] if total_uncertainties > 0 else "‚úì –í—Å–µ –ø–æ–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —É–≤–µ—Ä–µ–Ω–Ω–æ")
                    ], width=8),
                    
                    dbc.Col([
                        html.A(
                            dbc.Button([
                                html.I(className="fas fa-download me-2"),
                                "–°–∫–∞—á–∞—Ç—å CSV"
                            ], color="success", size="lg", className="w-100"),
                            href=f"data:text/csv;charset=utf-8;base64,{csv_b64}",
                            download=f"ocr_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                        ),
                        dcc.Download(id='download-csv')
                    ], width=4)
                ])
            ])
        ], className="mb-4")
    
    def run_server(self, debug: bool = True, host: str = '127.0.0.1', port: int = 8050):
        """
        –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        """
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Dashboard –Ω–∞ http://{host}:{port}")
        try:
            self.app.run(debug=debug, host=host, port=port)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.app.server.run(debug=debug, host=host, port=port)


if __name__ == '__main__':
    dashboard = OCRDashboard()
    dashboard.run_server(debug=True)
