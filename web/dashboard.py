"""
–†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è OCR Dashboard —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import dash
from dash import dcc, html, Input, Output, State
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate

import fitz  # PyMuPDF –¥–ª—è PDF
from PIL import Image
import pandas as pd
import io
import base64
import os
from datetime import datetime
import logging

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è OCR
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

logger = logging.getLogger(__name__)


class SimpleOCRProcessor:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, tesseract_cmd=None):
        self.tesseract_cmd = tesseract_cmd
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pytesseract
        try:
            import pytesseract
            if tesseract_cmd:
                pytesseract.pytesseract.tesseract_cmd = tesseract_cmd
            self.ocr_available = True
            logger.info("‚úÖ Tesseract OCR –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            self.ocr_available = False
            logger.warning("‚ö†Ô∏è pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def convert_pdf_to_images(self, pdf_bytes):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            pdf_document = fitz.open(stream=pdf_bytes, filetype="pdf")
            images = []
            
            for page_num in range(len(pdf_document)):
                page = pdf_document.load_page(page_num)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                mat = fitz.Matrix(2.0, 2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                pix = page.get_pixmap(matrix=mat)
                img_data = pix.tobytes("png")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                img = Image.open(io.BytesIO(img_data))
                images.append(img)
                
                logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {img.size}")
            
            pdf_document.close()
            return images
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF: {e}")
            return []
    
    def extract_text_simple(self, img):
        """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.ocr_available:
            return {
                'fullname': 'OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)',
                'series': 'N/A',
                'number': 'N/A', 
                'registrationnumber': 'N/A',
                'issuedate': 'N/A'
            }
        
        try:
            import pytesseract
            
            # –ü—Ä–æ—Å—Ç–æ–µ OCR –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text = pytesseract.image_to_string(img, lang='rus')
            
            # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            lines = [line.strip() for line in text.split('\n') if line.strip()]
            
            result = {
                'fullname': lines[0] if len(lines) > 0 else '–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ',
                'series': 'XX',
                'number': '123456',
                'registrationnumber': '000001',
                'issuedate': '2024-01-01',
                'raw_text': text[:200] + '...' if len(text) > 200 else text
            }
            
            logger.info(f"OCR –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(lines)} —Å—Ç—Ä–æ–∫")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
            return {
                'fullname': f'–û—à–∏–±–∫–∞ OCR: {str(e)}',
                'series': 'N/A',
                'number': 'N/A',
                'registrationnumber': 'N/A', 
                'issuedate': 'N/A'
            }


class OCRDashboard:
    """
    –†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è OCR Dashboard
    """
    
    def __init__(self, tesseract_cmd=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.ocr_processor = SimpleOCRProcessor(tesseract_cmd)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Dash –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = dash.Dash(
            __name__,
            external_stylesheets=[
                dbc.themes.BOOTSTRAP,
                dbc.icons.FONT_AWESOME
            ],
            title="OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        )
        
        # Layout –∏ callbacks
        self.app.layout = self.create_layout()
        self.setup_callbacks()
    
    def create_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ layout —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
        return dbc.Container([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            dbc.Alert([
                html.H1([
                    html.I(className="fas fa-search me-3"),
                    "OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                ]),
                html.P("–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å Tesseract OCR", className="mb-0")
            ], color="primary", className="mb-4"),
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏
            dbc.Card([
                dbc.CardHeader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            # –û–±–ª–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                            dcc.Upload(
                                id='upload-document',
                                children=dbc.Alert([
                                    html.I(className="fas fa-cloud-upload-alt fa-3x mb-3"),
                                    html.Br(),
                                    html.H5("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞"),
                                    html.P("–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞", className="text-muted"),
                                    html.Small("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF –¥–æ 50MB")
                                ], color="light", className="text-center py-4"),
                                style={
                                    'borderWidth': '2px',
                                    'borderStyle': 'dashed',
                                    'borderRadius': '10px',
                                    'borderColor': '#007bff',
                                    'cursor': 'pointer'
                                },
                                multiple=False,
                                accept='.pdf'
                            )
                        ], width=8),
                        
                        dbc.Col([
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                            html.Label("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", className="fw-bold mb-2"),
                            dcc.Dropdown(
                                id='config-selector',
                                options=[
                                    {'label': 'üè¢ 1–¢ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': '1T_CERTIFICATE'},
                                    {'label': 'üè¢ 1–¢ - –î–∏–ø–ª–æ–º', 'value': '1T_DIPLOMA'},
                                    {'label': 'üèõÔ∏è –†–û–°–ù–û–£ - –î–∏–ø–ª–æ–º', 'value': 'ROSNOU_DIPLOMA'},
                                    {'label': 'üèõÔ∏è –†–û–°–ù–û–£ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': 'ROSNOU_CERTIFICATE'},
                                    {'label': 'üè¶ –§–∏–Ω–£–Ω–∏–≤ - –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', 'value': 'FINUNIV_CERT'}
                                ],
                                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                                className="mb-3"
                            ),
                            
                            html.Label("–ü–æ–≤–æ—Ä–æ—Ç:", className="fw-bold mb-2"),
                            dcc.Dropdown(
                                id='rotation-selector',
                                options=[
                                    {'label': '–ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞', 'value': 0},
                                    {'label': '90¬∞', 'value': 90},
                                    {'label': '180¬∞', 'value': 180},
                                    {'label': '270¬∞', 'value': 270}
                                ],
                                value=0,
                                className="mb-3"
                            ),
                            
                            dbc.Button(
                                [html.I(className="fas fa-rocket me-2"), "–ó–∞–ø—É—Å—Ç–∏—Ç—å OCR"],
                                id="run-ocr-btn",
                                color="primary",
                                size="lg",
                                disabled=True,
                                className="w-100"
                            )
                        ], width=4)
                    ])
                ])
            ], className="mb-4"),
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
            html.Div(id="status-panel"),
            
            # –ü—Ä–µ–≤—å—é PDF
            html.Div(id="pdf-preview-panel", className="mb-4"),
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR
            html.Div(id="ocr-results-panel"),
            
            # –°–∫—Ä—ã—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
            dcc.Store(id='pdf-data-store')
            
        ], fluid=True, className="py-4")
    
    def setup_callbacks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö callbacks"""
        
        @self.app.callback(
            [Output('pdf-data-store', 'data'),
             Output('pdf-preview-panel', 'children'),
             Output('run-ocr-btn', 'disabled'),
             Output('status-panel', 'children')],
            [Input('upload-document', 'contents')],
            [State('upload-document', 'filename')]
        )
        def handle_upload(contents, filename):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF"""
            if not contents:
                return None, None, True, ""
            
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
                content_type, content_string = contents.split(',')
                decoded = base64.b64decode(content_string)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                images = self.ocr_processor.convert_pdf_to_images(decoded)
                
                if not images:
                    error_status = dbc.Alert([
                        html.I(className="fas fa-exclamation-triangle me-2"),
                        "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ñ–∞–π–ª"
                    ], color="danger")
                    return None, None, True, error_status
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
                images_b64 = []
                preview_components = []
                
                for i, img in enumerate(images):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                    buffer = io.BytesIO()
                    img.save(buffer, format='PNG')
                    img_b64 = base64.b64encode(buffer.getvalue()).decode()
                    images_b64.append(img_b64)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–∞–Ω–∏—Ü
                    if i < 3:
                        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
                        thumbnail = img.copy()
                        thumbnail.thumbnail((200, 300), Image.LANCZOS)
                        thumb_buffer = io.BytesIO()
                        thumbnail.save(thumb_buffer, format='PNG')
                        thumb_b64 = base64.b64encode(thumb_buffer.getvalue()).decode()
                        
                        preview_components.append(
                            dbc.Col([
                                dbc.Card([
                                    dbc.CardImg(
                                        src=f"data:image/png;base64,{thumb_b64}",
                                        top=True,
                                        style={'height': '200px', 'object-fit': 'contain'}
                                    ),
                                    dbc.CardBody([
                                        html.H6(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1}", className="text-center"),
                                        html.Small(f"{img.width}√ó{img.height}px", 
                                                 className="text-muted text-center d-block")
                                    ], className="py-2")
                                ])
                            ], width=4, className="mb-3")
                        )
                
                # –ü—Ä–µ–≤—å—é –ø–∞–Ω–µ–ª—å
                preview_panel = dbc.Card([
                    dbc.CardHeader(f"üìÑ {filename} - {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü"),
                    dbc.CardBody([
                        dbc.Row(preview_components) if preview_components else html.P("–ü—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    ])
                ])
                
                # –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
                success_status = dbc.Alert([
                    html.I(className="fas fa-check-circle me-2"),
                    f"PDF –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°—Ç—Ä–∞–Ω–∏—Ü: {len(images)}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ OCR."
                ], color="success")
                
                return images_b64, preview_panel, False, success_status
                
            except Exception as e:
                error_status = dbc.Alert([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}"
                ], color="danger")
                return None, None, True, error_status
        
        @self.app.callback(
            Output('ocr-results-panel', 'children'),
            [Input('run-ocr-btn', 'n_clicks')],
            [State('pdf-data-store', 'data'),
             State('config-selector', 'value'),
             State('rotation-selector', 'value')]
        )
        def run_ocr(n_clicks, pdf_data, config, rotation):
            """–ó–∞–ø—É—Å–∫ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
            if not n_clicks or not pdf_data or not config:
                raise PreventUpdate
            
            try:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ base64
                images = []
                for img_b64 in pdf_data:
                    img_data = base64.b64decode(img_b64)
                    img = Image.open(io.BytesIO(img_data))
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if rotation == 90:
                        img = img.transpose(Image.ROTATE_90)
                    elif rotation == 180:
                        img = img.transpose(Image.ROTATE_180)
                    elif rotation == 270:
                        img = img.transpose(Image.ROTATE_270)
                    
                    images.append(img)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º OCR –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                all_results = []
                result_components = []
                
                for i, img in enumerate(images):
                    result = self.ocr_processor.extract_text_simple(img)
                    result['page'] = i + 1
                    all_results.append(result)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_result = self.create_page_result_card(result, img)
                    result_components.append(page_result)
                
                # –°–≤–æ–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å
                summary_panel = self.create_summary_panel(all_results, config)
                
                return html.Div([
                    summary_panel,
                    html.Hr(),
                    html.Div(result_components)
                ])
                
            except Exception as e:
                error_panel = dbc.Alert([
                    html.I(className="fas fa-exclamation-triangle me-2"),
                    f"–û—à–∏–±–∫–∞ OCR: {str(e)}"
                ], color="danger")
                return error_panel
    
    def create_page_result_card(self, result, img):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        buffer = io.BytesIO()
        img_resized = img.copy()
        img_resized.thumbnail((400, 600), Image.LANCZOS)
        img_resized.save(buffer, format='PNG')
        img_b64 = base64.b64encode(buffer.getvalue()).decode()
        
        return dbc.Card([
            dbc.CardHeader(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {result['page']}"),
            dbc.CardBody([
                dbc.Row([
                    dbc.Col([
                        html.H6("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"),
                        dbc.Table([
                            html.Tbody([
                                html.Tr([html.Td("–§–ò–û:"), html.Td(result['fullname'])]),
                                html.Tr([html.Td("–°–µ—Ä–∏—è:"), html.Td(result['series'])]),
                                html.Tr([html.Td("–ù–æ–º–µ—Ä:"), html.Td(result['number'])]),
                                html.Tr([html.Td("–†–µ–≥. –Ω–æ–º–µ—Ä:"), html.Td(result['registrationnumber'])]),
                                html.Tr([html.Td("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:"), html.Td(result['issuedate'])])
                            ])
                        ], bordered=True, size="sm"),
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                        html.Details([
                            html.Summary("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç OCR"),
                            html.Pre(result.get('raw_text', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'), 
                                   className="small bg-light p-2 mt-2")
                        ])
                    ], width=6),
                    
                    dbc.Col([
                        html.H6("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:"),
                        html.Img(
                            src=f"data:image/png;base64,{img_b64}",
                            style={'width': '100%', 'height': 'auto', 'max-height': '400px'},
                            className="border"
                        )
                    ], width=6)
                ])
            ])
        ], className="mb-4")
    
    def create_summary_panel(self, results, config):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        total_pages = len(results)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        for result in results:
            export_data.append({
                '–°—Ç—Ä–∞–Ω–∏—Ü–∞': result['page'],
                '–§–ò–û': result['fullname'],
                '–°–µ—Ä–∏—è': result['series'],
                '–ù–æ–º–µ—Ä': result['number'],
                '–†–µ–≥.–Ω–æ–º–µ—Ä': result['registrationnumber'],
                '–î–∞—Ç–∞': result['issuedate']
            })
        
        df = pd.DataFrame(export_data)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False, encoding='utf-8-sig')
        csv_b64 = base64.b64encode(csv_buffer.getvalue().encode()).decode()
        
        return dbc.Card([
            dbc.CardHeader("üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
            dbc.CardBody([
                dbc.Row([
                    dbc.Col([
                        dbc.Alert([
                            html.H5(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}"),
                            html.P(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}"),
                            html.P(f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                        ], color="info")
                    ], width=6),
                    
                    dbc.Col([
                        html.H6("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"),
                        html.A(
                            dbc.Button([
                                html.I(className="fas fa-download me-2"),
                                "–°–∫–∞—á–∞—Ç—å CSV"
                            ], color="success"),
                            href=f"data:text/csv;charset=utf-8;base64,{csv_b64}",
                            download=f"ocr_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                        )
                    ], width=6)
                ])
            ])
        ], className="mb-4")
    
    def run_server(self, debug=True, host='127.0.0.1', port=8050):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ OCR Dashboard –Ω–∞ http://{host}:{port}")
        try:
            self.app.run(debug=debug, host=host, port=port)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.app.server.run(debug=debug, host=host, port=port)


if __name__ == '__main__':
    dashboard = OCRDashboard()
    dashboard.run_server(debug=True)