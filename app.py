#!/usr/bin/env python3
"""
üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ 
–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–µ–π.
"""

import os
import sys
import logging
import argparse
from pathlib import Path
from typing import Optional
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
PROJECT_ROOT = Path(__file__).parent.absolute()
CORE_PATH = PROJECT_ROOT / 'core'
WEB_PATH = PROJECT_ROOT / 'web'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ sys.path
sys.path.insert(0, str(PROJECT_ROOT))
sys.path.insert(0, str(CORE_PATH))
sys.path.insert(0, str(WEB_PATH))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
LOG_FILE = PROJECT_ROOT / 'ocr_platform.log'

logging.basicConfig(
    level=logging.INFO,
    format=LOG_FORMAT,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(LOG_FILE, encoding='utf-8', mode='a')
    ]
)

logger = logging.getLogger(__name__)


class SystemValidator:
    """
    –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    
    @staticmethod
    def check_python_version() -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}")
            return False
        
        logger.info(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    
    @staticmethod
    def check_dependencies() -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        required_packages = {
            'dash': 'dash',
            'dash_bootstrap_components': 'dash-bootstrap-components',
            'plotly': 'plotly',
            'PIL': 'Pillow',
            'cv2': 'opencv-python',
            'numpy': 'numpy',
            'pandas': 'pandas',
            'pytesseract': 'pytesseract',
            'fitz': 'PyMuPDF'
        }
        
        missing_packages = []
        
        for import_name, package_name in required_packages.items():
            try:
                if import_name == 'PIL':
                    from PIL import Image
                    logger.debug(f"‚úÖ {package_name} - OK")
                elif import_name == 'cv2':
                    import cv2
                    logger.debug(f"‚úÖ {package_name} - OK")
                elif import_name == 'fitz':
                    import fitz
                    logger.debug(f"‚úÖ {package_name} - OK")
                else:
                    __import__(import_name)
                    logger.debug(f"‚úÖ {package_name} - OK")
                    
            except ImportError as e:
                missing_packages.append(package_name)
                logger.error(f"‚ùå {package_name} - –ù–ï –ù–ê–ô–î–ï–ù: {e}")
        
        if missing_packages:
            logger.error(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
            logger.error(f"pip install {' '.join(missing_packages)}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    
    @staticmethod
    def check_tesseract() -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Tesseract OCR"""
        possible_paths = []
        
        # Windows –ø—É—Ç–∏
        if platform.system() == 'Windows':
            possible_paths.extend([
                r"C:\Program Files\Tesseract-OCR\tesseract.exe",
                r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
                os.path.expanduser(r"~\AppData\Local\Tesseract-OCR\tesseract.exe")
            ])
        
        # Linux/Mac –ø—É—Ç–∏
        else:
            possible_paths.extend([
                "/usr/bin/tesseract",
                "/usr/local/bin/tesseract",
                "/opt/homebrew/bin/tesseract"
            ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_path = os.environ.get('TESSERACT_PATH')
        if env_path:
            possible_paths.insert(0, env_path)
        
        # –ò—â–µ–º –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
        for path in possible_paths:
            if path and os.path.isfile(path):
                logger.info(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: {path}")
                return path
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ which/where
        import shutil
        tesseract_path = shutil.which('tesseract')
        if tesseract_path:
            logger.info(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ PATH: {tesseract_path}")
            return tesseract_path
        
        logger.warning("‚ö†Ô∏è Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        logger.warning("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ --tesseract-path –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TESSERACT_PATH")
        return None
    
    @staticmethod
    def validate_project_structure() -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        required_files = {
            'core/ocr_engine.py': 'OCR –¥–≤–∏–∂–æ–∫',
            'core/config.py': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            'core/parsers.py': '–ü–∞—Ä—Å–µ—Ä—ã –ø–æ–ª–µ–π',
            'core/image_processor.py': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'web/dashboard.py': 'Dash –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            'requirements.txt': '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'
        }
        
        missing_files = []
        
        for file_path, description in required_files.items():
            full_path = PROJECT_ROOT / file_path
            if not full_path.exists():
                missing_files.append(f"{file_path} ({description})")
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.debug(f"‚úÖ {file_path}")
        
        if missing_files:
            logger.error(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
            for file in missing_files:
                logger.error(f"   - {file}")
            return False
        
        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True


class ConfigurationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    @staticmethod
    def load_core_modules() -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ core –º–æ–¥—É–ª–µ–π"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ core –º–æ–¥—É–ª–µ–π...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
            from core.config import get_available_configs, get_config
            from core.parsers import ParserRegistry
            from core.ocr_engine import DocumentProcessor
            from core.image_processor import AdvancedImageProcessor
            
            logger.info("‚úÖ –í—Å–µ core –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            configs = get_available_configs()
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")
            
            for conf in configs:
                logger.debug(f"   - {conf['organization']}: {conf['name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Å–µ—Ä—ã
            parsers = ParserRegistry.list_parsers()
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(parsers)}")
            for parser in parsers:
                logger.debug(f"   - {parser}")
            
            return True
            
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ core –º–æ–¥—É–ª–µ–π: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π: {e}")
            return False
    
    @staticmethod
    def validate_configurations() -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            from core.config import DOCUMENT_CONFIGS, validate_config
            
            logger.info("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            
            valid_count = 0
            invalid_count = 0
            
            for config_id, config_func in DOCUMENT_CONFIGS.items():
                try:
                    config = config_func()
                    errors = validate_config(config)
                    
                    if errors:
                        logger.warning(f"‚ö†Ô∏è {config_id}: {len(errors)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
                        for error in errors:
                            logger.debug(f"      - {error}")
                        invalid_count += 1
                    else:
                        valid_count += 1
                        logger.debug(f"‚úÖ {config_id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {config_id}: {e}")
                    invalid_count += 1
            
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {valid_count}/{len(DOCUMENT_CONFIGS)}")
            
            if invalid_count > 0:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: {invalid_count}")
            
            return valid_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return False


def print_startup_banner():
    """–í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                          ‚ïë
‚ïë         üîç OCR –ü–õ–ê–¢–§–û–†–ú–ê –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í                                 ‚ïë
‚ïë         –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º            ‚ïë
‚ïë                                                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:
   üè¢ 1–¢
      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
      ‚úì –î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ

   üèõÔ∏è –†–û–°–ù–û–£ (–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)
      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
      ‚úì –î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ

   üè¶ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 1) - –§–ò–û –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 2) - –§–ò–û –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫–∞—Ö ‚ö†Ô∏è

üîß –ò–ó–í–õ–ï–ö–ê–ï–ú–´–ï –ü–û–õ–Ø:
   ‚Ä¢ –§–ò–û (–≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)
   ‚Ä¢ –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
   ‚Ä¢ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ)

‚ú® –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
   ‚Ä¢ –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞
   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏ –≤—ã—Ä–µ–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
   ‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ–ª–µ–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
   ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV/JSON

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
    print(banner)


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python app.py
  python app.py --port 8080
  python app.py --tesseract-path "C:\\Program Files\\Tesseract-OCR\\tesseract.exe"
  python app.py --host 0.0.0.0 --port 80 --no-debug
        """
    )
    
    parser.add_argument(
        '--host',
        default='127.0.0.1',
        help='IP –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 127.0.0.1)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=8050,
        help='–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8050)'
    )
    
    parser.add_argument(
        '--debug',
        action='store_true',
        default=True,
        help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–∫–ª—é—á–µ–Ω)'
    )
    
    parser.add_argument(
        '--no-debug',
        action='store_false',
        dest='debug',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )
    
    parser.add_argument(
        '--tesseract-path',
        help='–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Tesseract'
    )
    
    parser.add_argument(
        '--validate-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞'
    )
    
    parser.add_argument(
        '--log-level',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
        default='INFO',
        help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    return parser.parse_args()


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parse_arguments()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.getLogger().setLevel(getattr(logging, args.log_level))
    
    # –í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞
    print_startup_banner()
    
    logger.info("=" * 80)
    logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    logger.info("=" * 80)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    logger.info("\n[1/7] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    if not SystemValidator.check_python_version():
        sys.exit(1)
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    logger.info("\n[2/7] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    if not SystemValidator.validate_project_structure():
        logger.error("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        sys.exit(1)
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    logger.info("\n[3/7] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not SystemValidator.check_dependencies():
        logger.error("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)
    
    # –®–∞–≥ 4: –ü–æ–∏—Å–∫ Tesseract
    logger.info("\n[4/7] –ü–æ–∏—Å–∫ Tesseract OCR...")
    tesseract_path = args.tesseract_path or SystemValidator.check_tesseract()
    
    if not tesseract_path:
        logger.error("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error("–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR:")
        logger.error("   Windows: https://github.com/UB-Mannheim/tesseract/wiki")
        logger.error("   Linux: sudo apt install tesseract-ocr tesseract-ocr-rus")
        logger.error("   Mac: brew install tesseract tesseract-lang")
        sys.exit(1)
    
    # –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
    logger.info("\n[5/7] –ó–∞–≥—Ä—É–∑–∫–∞ core –º–æ–¥—É–ª–µ–π...")
    if not ConfigurationManager.load_core_modules():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π")
        sys.exit(1)
    
    # –®–∞–≥ 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    logger.info("\n[6/7] –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    if not ConfigurationManager.validate_configurations():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        sys.exit(1)
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if args.validate_only:
        logger.info("\n" + "=" * 80)
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info("=" * 80)
        return
    
    # –®–∞–≥ 7: –ó–∞–ø—É—Å–∫ Dashboard
    logger.info("\n[7/7] –ó–∞–ø—É—Å–∫ OCR Dashboard...")
    
    try:
        from web.dashboard import OCRDashboard
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ Dashboard
        dashboard = OCRDashboard(tesseract_cmd=tesseract_path)
        
        logger.info("\n" + "=" * 80)
        logger.info(f"üåê OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://{args.host}:{args.port}")
        logger.info(f"üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if args.debug else '–≤—ã–∫–ª—é—á–µ–Ω'}")
        logger.info(f"üìÅ –õ–æ–≥–∏: {LOG_FILE}")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        logger.info("=" * 80 + "\n")
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        dashboard.run_server(
            debug=args.debug,
            host=args.host,
            port=args.port
        )
        
    except KeyboardInterrupt:
        logger.info("\n\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Dashboard: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ web/dashboard.py")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)


if __name__ == '__main__':
    main()
