"""
üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –ø–æ–ª–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:
- 1–¢ (—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∏–ø–ª–æ–º—ã)
- –†–û–°–ù–û–£ (—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –∏ –¥–∏–ø–ª–æ–º—ã) 
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç (—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
"""

import os
import sys
import logging
import argparse
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
PROJECT_ROOT = Path(__file__).parent.absolute()
CORE_PATH = PROJECT_ROOT / 'core'
WEB_PATH = PROJECT_ROOT / 'web'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(PROJECT_ROOT))
sys.path.insert(0, str(CORE_PATH))
sys.path.insert(0, str(WEB_PATH))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(PROJECT_ROOT / 'ocr_platform.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)


def check_dependencies():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    required_packages = [
        'dash', 'dash_bootstrap_components', 'plotly',
        'PIL', 'cv2', 'numpy', 'pandas',
        'pytesseract', 'fitz', 're', 'json'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'PIL':
                from PIL import Image
            elif package == 'cv2':
                import cv2
            elif package == 'fitz':
                import fitz
            else:
                __import__(package)
            
            logger.debug(f"‚úÖ {package} - OK")
            
        except ImportError as e:
            missing_packages.append(package)
            logger.error(f"‚ùå {package} - –ù–ï –ù–ê–ô–î–ï–ù: {e}")
    
    if missing_packages:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {missing_packages}")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return False
    
    logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def find_tesseract():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ Tesseract –≤ —Å–∏—Å—Ç–µ–º–µ
    """
    possible_paths = [
        # Windows
        r"C:\Program Files\Tesseract-OCR\tesseract.exe",
        r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
        r"C:\Users\{}\AppData\Local\Programs\Tesseract-OCR\tesseract.exe".format(
            os.environ.get('USERNAME', '')
        ),
        
        # Linux/Mac
        "/usr/bin/tesseract",
        "/usr/local/bin/tesseract",
        "/opt/homebrew/bin/tesseract",
        
        # –ü—É—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ.get('TESSERACT_PATH', '')
    ]
    
    for path in possible_paths:
        if path and os.path.isfile(path):
            logger.info(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: {path}")
            return path
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ which/where
    import shutil
    tesseract_path = shutil.which('tesseract')
    if tesseract_path:
        logger.info(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ PATH: {tesseract_path}")
        return tesseract_path
    
    logger.warning("‚ö†Ô∏è Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    logger.warning("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TESSERACT_PATH –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä --tesseract-path")
    return None


def validate_project_structure():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    """
    required_files = [
        'core/ocr_engine.py',
        'core/config.py', 
        'web/dashboard.py',
        'web/markup_tool.py'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        full_path = PROJECT_ROOT / file_path
        if not full_path.exists():
            missing_files.append(file_path)
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def create_requirements_file():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt
    """
    requirements = """# OCR Platform Dependencies
dash>=2.14.0
dash-bootstrap-components>=1.5.0
plotly>=5.17.0
Pillow>=10.0.0
opencv-python>=4.8.0
numpy>=1.24.0
pandas>=2.1.0
pytesseract>=0.3.10
PyMuPDF>=1.23.0
python-dateutil>=2.8.2

# Optional: –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–µ–π (–±—É–¥—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
# pymorphy2>=0.9.1
"""
    
    req_file = PROJECT_ROOT / 'requirements.txt'
    if not req_file.exists():
        with open(req_file, 'w', encoding='utf-8') as f:
            f.write(requirements)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {req_file}")
    
    return req_file


def print_startup_info():
    """
    –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    """
    print("=" * 80)
    print("üîç OCR –ü–õ–ê–¢–§–û–†–ú–ê –î–õ–Ø –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–• –ü–û–õ–ï–ô –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 80)
    print()
    print("üìã –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:")
    print("   üè¢ 1–¢")
    print("      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("      ‚úì –î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ")
    print()
    print("   üèõÔ∏è –†–û–°–ù–û–£ (–†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)")
    print("      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("      ‚úì –î–∏–ø–ª–æ–º—ã –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ") 
    print()
    print("   üè¶ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
    print("      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 1) - –§–ò–û –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É")
    print("      ‚úì –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 2) - –§–ò–û –Ω–∞ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫–∞—Ö ‚ö†Ô∏è")
    print()
    print("üîß –ò–ó–í–õ–ï–ö–ê–ï–ú–´–ï –ü–û–õ–Ø:")
    print("   ‚Ä¢ –§–ò–û (–≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ)")
    print("   ‚Ä¢ –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    print("   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
    print("   ‚Ä¢ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ)")
    print()
    print("=" * 80)


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    parser = argparse.ArgumentParser(
        description='üîç OCR –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python app.py                                    # –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º Tesseract
  python app.py --port 8080                       # –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É 8080
  python app.py --tesseract-path /path/to/tesseract # –£–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ Tesseract
  python app.py --host 0.0.0.0 --port 80         # –ó–∞–ø—É—Å–∫ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        """
    )
    
    parser.add_argument(
        '--host', 
        default='127.0.0.1',
        help='IP –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 127.0.0.1)'
    )
    
    parser.add_argument(
        '--port', 
        type=int, 
        default=8050,
        help='–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8050)'
    )
    
    parser.add_argument(
        '--debug', 
        action='store_true',
        help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏'
    )
    
    parser.add_argument(
        '--tesseract-path',
        help='–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Tesseract'
    )
    
    parser.add_argument(
        '--create-requirements',
        action='store_true',
        help='–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª requirements.txt –∏ –≤—ã–π—Ç–∏'
    )
    
    parser.add_argument(
        '--check-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –≤—ã–π—Ç–∏'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ requirements.txt
    if args.create_requirements:
        req_file = create_requirements_file()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {req_file}")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    if not validate_project_structure():
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤.")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã")
        req_file = create_requirements_file()
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r {req_file}")
        sys.exit(1)
    
    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if args.check_only:
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return
    
    # –ü–æ–∏—Å–∫ Tesseract
    tesseract_path = args.tesseract_path or find_tesseract()
    if not tesseract_path:
        logger.error("‚ùå Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract OCR:")
        logger.error("  Windows: https://github.com/UB-Mannheim/tesseract/wiki")
        logger.error("  Ubuntu: sudo apt install tesseract-ocr tesseract-ocr-rus")
        logger.error("  MacOS: brew install tesseract tesseract-lang")
        sys.exit(1)
    
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    print_startup_info()
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        from web.dashboard import OCRDashboard
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR Dashboard...")
        dashboard = OCRDashboard(tesseract_cmd=tesseract_path)
        
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{args.host}:{args.port}")
        logger.info("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        dashboard.run_server(
            debug=args.debug,
            host=args.host,
            port=args.port
        )
        
    except KeyboardInterrupt:
        logger.info("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)


if __name__ == '__main__':
    main()
